This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
packages/
  admin/
    src/
      app/
        (auth)/
          login/
            page.css.ts
            page.tsx
        (dashboard)/
          achievement/
            [id]/
              page.tsx
            page.tsx
          announcement/
            page.tsx
          application/
            [id]/
              [responseId]/
                page.tsx
              page.tsx
            page.css.ts
            page.tsx
          attendance/
            page.css.ts
            page.tsx
          class/
            board/
              page.css.ts
              page.tsx
            page.css.ts
            page.tsx
          homework/
            [id]/
              page.tsx
            page.css.ts
            page.tsx
          member/
            [id]/
              page.tsx
            page.tsx
          portfolio/
            [id]/
              page.tsx
            page.tsx
          layout.css.ts
          layout.tsx
          page.css.ts
          page.tsx
        layout.css.ts
        layout.tsx
        not-found.css.ts
        not-found.tsx
      components/
        breadcrumb/
          index.tsx
          style.css.ts
        card/
          achievement/
            index.tsx
            style.css.ts
          announcement/
            index.tsx
            style.css.ts
          application/
            index.tsx
            style.css.ts
          attendance/
            stat/
              index.tsx
              style.css.ts
            index.tsx
            shared.ts
            style.css.ts
          homework/
            index.tsx
            style.css.ts
          member/
            index.tsx
            style.css.ts
          portfolio/
            index.tsx
            style.css.ts
        header/
          index.tsx
          style.css.ts
        page-template/
          index.tsx
          style.css.ts
      lib/
        enum/
          announcement/
            index.tsx
            utils.ts
          contest/
            index.ts
            utils.ts
          executive/
            index.ts
            utils.ts
          status/
            index.ts
            utils.ts
          unit/
            index.ts
            utils.ts
          index.ts
          utils.ts
        pathmap/
          index.ts
        types/
          grade/
            index.ts
            utils.ts
          member/
            index.ts
            utils.ts
          index.ts
          utils.ts
        utils/
          date.ts
      sections/
        achievement/
          detail/
            Action/
              index.tsx
            ContestSegment/
              index.tsx
            Form/
              index.tsx
              style.css.ts
            Info/
              index.tsx
              shared.ts
              style.css.ts
        announcement/
          Form/
            index.tsx
            style.css.ts
          History/
            index.tsx
        application/
          detail/
            Action/
              index.tsx
            Info/
              index.tsx
              style.css.ts
        homework/
          detail/
            Content/
              index.tsx
              style.css.ts
        member/
          detail/
            Action/
              index.tsx
            BasicInfo/
              index.tsx
            Info/
              index.tsx
              shared.ts
            Summary/
              index.tsx
              style.css.ts
        portfolio/
          detail/
            Banner/
              index.tsx
              style.css.ts
            Form/
              index.tsx
              style.css.ts
            Info/
              index.tsx
              shared.ts
              style.css.ts
    next-env.d.ts
    next.config.mjs
    package.json
    tsconfig.json
  shared/
    configs/
      nextjs.mjs
    layout/
      sidebar/
        content/
          index.tsx
        item/
          index.tsx
          style.css.ts
        item-group/
          index.tsx
          style.css.ts
        sub-item/
          index.tsx
          style.css.ts
        index.tsx
        style.css.ts
    lib/
      animate/
        index.tsx
      pathmap/
        index.ts
        types.d.ts
    package.json
    tsconfig.json
.gitignore
eslint.config.mjs
package.json
pnpm-workspace.yaml
README.md

================================================================
Files
================================================================

================
File: packages/admin/src/app/(auth)/login/page.css.ts
================
import { colorVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  background: colorVars.surface.default,
  position: 'relative',
});

export const container = style({
  width: 300,
});

export const footer = style({
  position: 'absolute',
  bottom: 24,
  color: colorVars.content.muted,
});

================
File: packages/admin/src/app/(auth)/login/page.tsx
================
import * as s from './page.css';

import {
  BrandIcon,
  Button,
  HStack,
  spacingVars,
  StackAlign,
  TAPIESymbol,
  TAPIESymbolSize,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

export default function IndexPage() {
  return (
    <HStack
      className={s.base}
      fullWidth
      fullHeight
    >
      <VStack
        className={s.container}
        spacing={spacingVars.moderate}
        align={StackAlign.START}
      >
        <VStack
          spacing={spacingVars.tiny}
          align={StackAlign.START}
        >
          <TAPIESymbol
            size={TAPIESymbolSize._16}
            hasLabel
          />
          <Typo.Medium weight={Weight.MEDIUM}>관리 시스템</Typo.Medium>
        </VStack>
        <Button.Default
          leadingIcon={BrandIcon.GOOGLE}
          fullWidth
        >
          Google로 TAPIE 로그인
        </Button.Default>
      </VStack>

      <VStack
        spacing={spacingVars.micro}
        className={s.footer}
      >
        <Typo.Micro>© 2025 TAPIE. All rights reserved.</Typo.Micro>
        <Typo.Mini>
          로그인 시도 및 접속 기록은 모두 수집되며 비정상적인 활동 감지시 TAPIE는 대응을 위해 해당
          기록을 활용할 수 있습니다.
        </Typo.Mini>
      </VStack>
    </HStack>
  );
}

================
File: packages/admin/src/app/(dashboard)/achievement/[id]/page.tsx
================
import { spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import { use } from 'react';
import PageTemplate from '../../../../components/page-template';
import AchievementDetailActionSection from '../../../../sections/achievement/detail/Action';
import AchievementDetailContestSegment from '../../../../sections/achievement/detail/ContestSegment';
import AchievementDetailFormSection from '../../../../sections/achievement/detail/Form';
import AchievementDetailInfoSection from '../../../../sections/achievement/detail/Info';

export default function AchievementDetailPage({
  params,
}: {
  params: Promise<{
    id: number;
  }>;
}) {
  const { id } = use(params);

  return (
    <PageTemplate title='수상실적 상세'>
      <VStack
        fullWidth
        spacing={spacingVars.medium}
        align={StackAlign.START}
      >
        <AchievementDetailContestSegment />
        <AchievementDetailFormSection />
        <AchievementDetailInfoSection
          info={[
            {
              member: {
                name: '권지원',
                studentId: 10404,
              },
            },
          ]}
        />
        <AchievementDetailActionSection />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/achievement/page.tsx
================
'use client';

import {
  Button,
  ButtonSize,
  Filter,
  GlyphIcon,
  Grid,
  HStack,
  spacingVars,
  StackAlign,
  StackJustify,
  VStack,
} from '@tapie-kr/inspire-react';

import { type ChangeEvent, useState } from 'react';
import AchievementCard from '../../../components/card/achievement';
import PageTemplate from '../../../components/page-template';
import { Contest } from '../../../lib/enum';
import { getContestFilterGroup, getUnitFilterGroup } from '../../../lib/enum/utils';

export default function AchievementPage() {
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  return (
    <PageTemplate
      hasSearch
      title='수상실적'
      count={7}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <HStack
          fullWidth
          justify={StackJustify.BETWEEN}
          align={StackAlign.START}
        >
          <Filter filters={[getContestFilterGroup(), getUnitFilterGroup()]} />
          <Button.Default
            size={ButtonSize.SMALL}
            leadingIcon={GlyphIcon.ADD}
          >
            수상실적 등록
          </Button.Default>
        </HStack>
        <Grid
          columnCount={3}
          gap={spacingVars.petite}
        >
          {Array.from({ length: 7 }).map((_, index) => (
            <AchievementCard
              key={index}
              contestName='24th 앱잼 생활'
              contestType={Contest.INTERNAL}
              year={2025}
              grade={{
                grade: 1,
                gradeLabel: '최우수상',
              }}
              members={[
                {
                  name: '한유찬',
                  studentId: 10000,
                },
                {
                  name: '신유준',
                  studentId: 10000,
                },
              ]}
            />
          ))}
        </Grid>
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/announcement/page.tsx
================
import { spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import PageTemplate from '../../../components/page-template';
import AnnouncementFormSection from '../../../sections/announcement/Form';
import AnnouncementHistorySection from '../../../sections/announcement/History';

export default function AnnouncementPage() {
  return (
    <PageTemplate title='공지사항'>
      <VStack
        fullWidth
        spacing={spacingVars.medium}
        align={StackAlign.START}
      >
        <AnnouncementFormSection />
        <AnnouncementHistorySection />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/application/[id]/[responseId]/page.tsx
================
import { spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import PageTemplate from '../../../../../components/page-template';
import { Unit } from '../../../../../lib/enum';
import ApplicationDetailActionSection from '../../../../../sections/application/detail/Action';
import ApplicationDetailInfoSection from '../../../../../sections/application/detail/Info';

export default function ApplicationDetailResponsePage() {
  return (
    <PageTemplate title='신청폼 상세'>
      <VStack
        fullWidth
        spacing={spacingVars.medium}
        align={StackAlign.START}
      >
        <ApplicationDetailInfoSection
          portfolio={['TAPIE 포트폴리오 2025', 'ReactJS 사이트']}
          personalInfo={{
            name: '권지원',
            studentId: 10404,
            googleEmail: '24sunrin064@sunrint.hs.kr',
            phoneNumber: '010-2310-4403',
          }}
          applicationInfo={{
            unit: Unit.DEVELOPER,
            introduction: `TAPIE 웹 동아리 지원서
1. 자기소개안녕하세요. 저는 [이름]입니다. 현재 [학년/반]에 재학 중이며, 웹 개발에 대한 열정을 가진 학생입니다. 새로운 기술과 창의적인 아이디어를 통해 웹 개발에 도전하고 성장하고 싶어 TAPIE에 지원하게 되었습니다.
2. 지원 동기저는 웹을 통해 세상과 소통하고, 유용한 도구를 만들어 사람들에게 도움을 주고 싶다는 꿈을 가지고 있습니다. TAPIE는 웹 개발의 기초부터 심화까지 배울 수 있는 훌륭한 환경이라고 생각하며, 동아리 활동을 통해 다양한 사람들과 협업하고, 더 나은 개발자가 되고 싶습니다.
3. 관심 분야 및 경험
관심 분야: 프론트엔드 개발 (HTML, CSS, JavaScript) 및 사용자 경험(UX) 디자인
경험:
[간단한 프로젝트 또는 학습 경험 기술 - 예: 개인 웹사이트 제작, HTML/CSS 기초 학습 등]
[학교에서 진행한 IT 관련 활동 또는 과제]
4. 동아리 활동 계획TAPIE의 일원으로서, 적극적으로 프로젝트에 참여하며 팀원들과 협력하겠습니다. 또한, 새로운 기술을 배우고 공유하며, 동아리의 성장에 기여하고 싶습니다. [특정 목표 - 예: 동아리 내에서 진행하는 공모전 참여, 독창적인 웹 프로젝트 기획 등]
5. 하고 싶은 말제가 TAPIE에 합류할 수 있다면, 열정을 가지고 배우고 성장하겠습니다. 동아리의 비전과 목표를 이루는 데 최선을 다할 자신이 있습니다. 꼭 좋은 기회를 주시면 감사하겠습니다.`,
            motivation: `저는 웹 기술이 세상과 소통하는 강력한 도구라고 생각하며, 이를 활용해 다양한 아이디어를 실현하고 싶다는 열정을 가지고 있습니다. TAPIE는 웹 개발의 기초부터 심화까지 체계적으로 배울 수 있는 동아리로, 저에게 훌륭한 성장의 기회를 제공할 것이라 믿습니다.
특히, TAPIE에서 협업 프로젝트를 통해 동아리 선후배들과 아이디어를 교환하고, 실제 웹 개발 경험을 쌓으며 제 역량을 키우고 싶습니다. 더불어, 제가 가진 창의적 아이디어와 학습 열정을 바탕으로 동아리 활동에 적극적으로 기여하고 싶습니다.
웹 개발자로서의 첫걸음을 TAPIE와 함께하며, 동아리와 함께 성장해 나가고 싶습니다.`,
            expectedActivities: `저는 웹 기술이 세상과 소통하는 강력한 도구라고 생각하며, 이를 활용해 다양한 아이디어를 실현하고 싶다는 열정을 가지고 있습니다. TAPIE는 웹 개발의 기초부터 심화까지 체계적으로 배울 수 있는 동아리로, 저에게 훌륭한 성장의 기회를 제공할 것이라 믿습니다.
특히, TAPIE에서 협업 프로젝트를 통해 동아리 선후배들과 아이디어를 교환하고, 실제 웹 개발 경험을 쌓으며 제 역량을 키우고 싶습니다. 더불어, 제가 가진 창의적 아이디어와 학습 열정을 바탕으로 동아리 활동에 적극적으로 기여하고 싶습니다.
웹 개발자로서의 첫걸음을 TAPIE와 함께하며, 동아리와 함께 성장해 나가고 싶습니다.`,
            reasonToChoose: `저는 웹 기술이 세상과 소통하는 강력한 도구라고 생각하며, 이를 활용해 다양한 아이디어를 실현하고 싶다는 열정을 가지고 있습니다. TAPIE는 웹 개발의 기초부터 심화까지 체계적으로 배울 수 있는 동아리로, 저에게 훌륭한 성장의 기회를 제공할 것이라 믿습니다.
특히, TAPIE에서 협업 프로젝트를 통해 동아리 선후배들과 아이디어를 교환하고, 실제 웹 개발 경험을 쌓으며 제 역량을 키우고 싶습니다. 더불어, 제가 가진 창의적 아이디어와 학습 열정을 바탕으로 동아리 활동에 적극적으로 기여하고 싶습니다.
웹 개발자로서의 첫걸음을 TAPIE와 함께하며, 동아리와 함께 성장해 나가고 싶습니다.`,
          }}
        />
        <ApplicationDetailActionSection />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/application/[id]/page.tsx
================
'use client';

import { Filter, Grid, spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import { Temporal } from '@js-temporal/polyfill';
import { type ChangeEvent, useState } from 'react';
import ApplicationCard from '../../../../components/card/application';
import PageTemplate from '../../../../components/page-template';
import { Unit } from '../../../../lib/enum';
import { getUnitFilterGroup } from '../../../../lib/enum/utils';

export default function ApplicationDetailPage() {
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  return (
    <PageTemplate
      hasSearch
      title='신청폼'
      count={2}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <Filter filters={[getUnitFilterGroup()]} />
        <Grid
          columnCount={3}
          gap={spacingVars.petite}
        >
          {Array.from({ length: 6 }).map((_, index) => (
            <ApplicationCard
              key={index}
              unit={Unit.DEVELOPER}
              content='안녕하세요'
              member={{
                studentId: 10404,
                name: '권지원',
              }}
              date={Temporal.PlainDateTime.from({
                year: 2025,
                month: 3,
                day: 27,
                hour: 6,
                minute: 17,
              })}
            />
          ))}
        </Grid>
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/application/page.css.ts
================
import { style } from '@vanilla-extract/css';

export const title = style({
  cursor: 'pointer',
});

================
File: packages/admin/src/app/(dashboard)/application/page.tsx
================
'use client';

import * as s from './page.css';

import {
  Badge,
  colorVars,
  DataTable,
  Filter,
  GlyphIcon,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { Temporal } from '@js-temporal/polyfill';
import { useRouter } from 'next/navigation';
import { type ChangeEvent, useState } from 'react';
import PageTemplate from '../../../components/page-template';
import { Status } from '../../../lib/enum';
import { getStatusFilterGroup, getStatusIcon, getStatusTheme } from '../../../lib/enum/utils';
import { resolvePath } from '../../../lib/pathmap';
import { pathMap } from '../../../lib/pathmap/map';
import { getDateString } from '../../../lib/utils/date';

interface DataType {
  name: string;
  status: Status;
  from: Temporal.PlainDateTime;
  to: Temporal.PlainDateTime;
}

export default function ApplicationPage() {
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  const data: DataType[] = [
    {
      name: '2025년 TAPIE 2기',
      status: Status.SCHEDULED,
      from: Temporal.PlainDateTime.from({
        year: 2025,
        month: 3,
        day: 27,
        hour: 6,
        minute: 17,
      }),
      to: Temporal.PlainDateTime.from({
        year: 2026,
        month: 3,
        day: 27,
        hour: 6,
        minute: 17,
      }),
    },
  ];

  const router = useRouter();

  return (
    <PageTemplate
      hasSearch
      title='신청폼'
      count={2}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <Filter filters={[getStatusFilterGroup()]} />
        <DataTable
          showIndex
          data={data}
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.LOCK_OPEN,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'name',
              label: '이름',
              width: 250,
              isSortable: true,
              cell: (title, index) => {
                const handleNavigate = () => {
                  router.push(resolvePath(pathMap.application, index));
                };

                return (
                  <Typo.Petite
                    weight={Weight.MEDIUM}
                    className={s.title}
                    onClick={handleNavigate}
                  >
                    {title}
                  </Typo.Petite>
                );
              },
            },
            {
              key: 'status',
              label: '상태',
              width: 120,
              isSortable: true,
              cell: status => (
                <Badge.Default
                  label={status}
                  leadingIcon={getStatusIcon(status)}
                  theme={getStatusTheme(status)}
                />
              ),
            },
            {
              key: 'from',
              label: '시작일',
              width: 150,
              isSortable: true,
              cell: from => (
                <Typo.Tiny color={colorVars.content.default}>{getDateString(from, true)}</Typo.Tiny>
              ),
            },
            {
              key: 'to',
              label: '종료일',
              width: 150,
              isSortable: true,
              cell: to => (
                <Typo.Tiny color={colorVars.content.default}>{getDateString(to, true)}</Typo.Tiny>
              ),
            },
          ]}
        />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/attendance/page.css.ts
================
import { colorVars, getShorthandedValue, radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const card = style({
  width: 190,
  border: getShorthandedValue('1px', 'solid', colorVars.line.border),
  borderRadius: radiusVars.smooth,
  background: colorVars.surface.default,
  padding: spacingVars.base,
});

================
File: packages/admin/src/app/(dashboard)/attendance/page.tsx
================
import {
  Filter,
  Grid,
  HStack,
  spacingVars,
  StackAlign,
  StackJustify,
  VStack,
} from '@tapie-kr/inspire-react';

import AttendanceCard from '../../../components/card/attendance';
import { AttendanceUnit } from '../../../components/card/attendance/shared';
import AttendanceStatCard from '../../../components/card/attendance/stat';
import PageTemplate from '../../../components/page-template';
import { getContestFilterGroup } from '../../../lib/enum/utils';

const attendanceData = [
  {
    count: 32,
    unit: AttendanceUnit.MONTH,
  },
  {
    count: 535,
    unit: AttendanceUnit.YEAR,
  },
];

export default function AttendancePage() {
  return (
    <PageTemplate
      title='출석'
      count={0}
    >
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <HStack
          fullWidth
          spacing={spacingVars.base}
          justify={StackJustify.START}
        >
          {attendanceData.map((item, index) => {
            return (
              <AttendanceStatCard
                key={index}
                count={item.count}
                unit={item.unit}
              />
            );
          })}
        </HStack>
        <VStack
          spacing={spacingVars.petite}
          align={StackAlign.START}
        >
          <Filter filters={[getContestFilterGroup()]} />
          <Grid
            columnCount={3}
            gap={spacingVars.petite}
          >
            <AttendanceCard
              day={23}
              count={5}
              member={{
                studentId: 10417,
                name: '신유준',
              }}
            />
            {Array.from({ length: 5 }).map((_, index) => (
              <AttendanceCard
                key={index}
                isAbsent
                day={23}
                count={5}
                member={{
                  studentId: 10417,
                  name: '신유준',
                }}
              />
            ))}
          </Grid>
        </VStack>
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/class/board/page.css.ts
================
import { colorVars, radiusVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const circle = style({
  width: 22,
  height: 22,
  borderRadius: radiusVars.full,
  background: colorVars.surface.raised,
});

================
File: packages/admin/src/app/(dashboard)/class/board/page.tsx
================
'use client';

import * as s from './page.css';

import {
  Badge,
  Button,
  ButtonSize,
  colorVars,
  DataTable,
  Filter,
  GlyphIcon,
  HStack,
  spacingVars,
  StackAlign,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type ChangeEvent, useState } from 'react';
import PageTemplate from '../../../../components/page-template';
import { Status, Unit } from '../../../../lib/enum';
import {
  getContestFilterGroup,
  getStatusFilterGroup,
  getStatusIcon,
  getStatusTheme,
  getUnitIcon,
} from '../../../../lib/enum/utils';

interface DataType {
  title: string;
  status: Status;
  instructor: string;
  unit: Unit;
  date: string;
}

const data: DataType[] = [
  {
    title: 'React 작동 원리 및 최적화',
    status: Status.CONFIRMED,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.CANCELED,
    instructor: '성이름',
    unit: Unit.DESIGNER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.SCHEDULED,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.POSTPONED,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.IN_PROGRESS,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
];

export default function ClassBoardPage() {
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  return (
    <PageTemplate
      hasSearch
      title='게시글'
      count={25}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        spacing={spacingVars.petite}
      >
        <HStack
          fullWidth
          justify={StackJustify.BETWEEN}
          align={StackAlign.START}
        >
          <Filter filters={[getStatusFilterGroup(), getContestFilterGroup()]} />
          <Button.Default
            leadingIcon={GlyphIcon.ADD}
            size={ButtonSize.SMALL}
          >
            수업 등록
          </Button.Default>
        </HStack>
        <DataTable
          showIndex
          data={data}
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'title',
              label: '제목',
              width: 250,
              isSortable: true,
              cell: title => <Typo.Petite weight={Weight.MEDIUM}>{title}</Typo.Petite>,
            },
            {
              key: 'status',
              label: '상태',
              width: 120,
              isSortable: true,
              cell: status => {
                return (
                  <Badge.Default
                    label={status}
                    leadingIcon={getStatusIcon(status)}
                    theme={getStatusTheme(status)}
                  />
                );
              },
            },
            {
              key: 'instructor',
              label: '진행자',
              width: 120,
              isSortable: true,
              cell: instructor => (
                <HStack spacing={spacingVars.micro}>
                  <div className={s.circle} />
                  <Typo.Tiny weight={Weight.MEDIUM}>{instructor}</Typo.Tiny>
                </HStack>
              ),
            },
            {
              key: 'unit',
              label: '유닛',
              width: 120,
              isSortable: true,
              cell: unit => {
                return (
                  <Badge.Default
                    label={unit}
                    leadingIcon={getUnitIcon(unit)}
                  />
                );
              },
            },
            {
              key: 'date',
              label: '수업일',
              width: 100,
              isSortable: true,
              cell: date => <Typo.Tiny color={colorVars.content.default}>{date}</Typo.Tiny>,
            },
          ]}
        />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/class/page.css.ts
================
import { colorVars, radiusVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const circle = style({
  width: 22,
  height: 22,
  borderRadius: radiusVars.full,
  background: colorVars.surface.raised,
});

================
File: packages/admin/src/app/(dashboard)/class/page.tsx
================
'use client';

import * as s from './page.css';

import {
  Badge,
  Button,
  ButtonSize,
  colorVars,
  DataTable,
  Filter,
  GlyphIcon,
  HStack,
  spacingVars,
  StackAlign,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type ChangeEvent, useState } from 'react';
import PageTemplate from '../../../components/page-template';
import { Status, Unit } from '../../../lib/enum';
import {
  getContestFilterGroup,
  getStatusFilterGroup,
  getStatusIcon,
  getStatusTheme,
  getUnitIcon,
} from '../../../lib/enum/utils';

type DataType = {
  title: string;
  status: Status;
  instructor: string;
  unit: Unit;
  date: string;
};

const data: DataType[] = [
  {
    title: 'React 작동 원리 및 최적화',
    status: Status.CONFIRMED,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.CANCELED,
    instructor: '성이름',
    unit: Unit.DESIGNER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.SCHEDULED,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.POSTPONED,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
  {
    title: '수업 제목',
    status: Status.IN_PROGRESS,
    instructor: '성이름',
    unit: Unit.DEVELOPER,
    date: '2025-01-01',
  },
];

export default function ClassPage() {
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  return (
    <PageTemplate
      hasSearch
      title='수업'
      count={172}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        spacing={spacingVars.petite}
      >
        <HStack
          fullWidth
          justify={StackJustify.BETWEEN}
          align={StackAlign.START}
        >
          <Filter filters={[getStatusFilterGroup(), getContestFilterGroup()]} />
          <Button.Default
            leadingIcon={GlyphIcon.ADD}
            size={ButtonSize.SMALL}
          >
            수업 등록
          </Button.Default>
        </HStack>
        <DataTable
          showIndex
          data={data}
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'title',
              label: '제목',
              width: 250,
              isSortable: true,
              cell: title => <Typo.Petite weight={Weight.MEDIUM}>{title}</Typo.Petite>,
            },
            {
              key: 'status',
              label: '상태',
              width: 120,
              isSortable: true,
              cell: status => {
                return (
                  <Badge.Default
                    label={status}
                    leadingIcon={getStatusIcon(status)}
                    theme={getStatusTheme(status)}
                  />
                );
              },
            },
            {
              key: 'instructor',
              label: '진행자',
              width: 120,
              isSortable: true,
              cell: instructor => (
                <HStack spacing={spacingVars.micro}>
                  <div className={s.circle} />
                  <Typo.Tiny weight={Weight.MEDIUM}>{instructor}</Typo.Tiny>
                </HStack>
              ),
            },
            {
              key: 'unit',
              label: '유닛',
              width: 120,
              isSortable: true,
              cell: unit => {
                return (
                  <Badge.Default
                    label={unit}
                    leadingIcon={getUnitIcon(unit)}
                  />
                );
              },
            },
            {
              key: 'date',
              label: '수업일',
              width: 100,
              isSortable: true,
              cell: date => <Typo.Tiny color={colorVars.content.default}>{date}</Typo.Tiny>,
            },
          ]}
        />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/homework/[id]/page.tsx
================
'use client';

import {
  Filter,
  GlyphIcon,
  Grid,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { Temporal } from '@js-temporal/polyfill';
import { use } from 'react';
import HomeworkCard from '../../../../components/card/homework';
import PageTemplate from '../../../../components/page-template';
import { Unit } from '../../../../lib/enum';
import { getContestFilterGroup } from '../../../../lib/enum/utils';
import HomeworkDetailContentSection from '../../../../sections/homework/detail/Content';
import { homeworkData } from '../page';

export default function HomeworkDetailPage({
  params,
}: {
  params: Promise<{
    id: number;
  }>;
}) {
  const { id } = use(params);
  const title = homeworkData[Number(id) - 1].title;

  return (
    <PageTemplate
      title={title || '과제 상세'}
      hasCount={false}
    >
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <HomeworkDetailContentSection
          content={`기본 앱 구현제공된 리액트 템플릿 프로젝트 또는 직접 구현한 간단한 애플리케이션을 사용하여 기본 동작을 확인합니다.애플리케이션은 간단한 CRUD 기능을 포함하고, 렌더링 및 상태 관리가 빈번하게 발생하도록 설계합니다.
성능 분석애플리케이션 성능을 분석하기 위해 다음 도구 및 기법을 사용합니다.
React Developer Tools (Profiler)
Chrome DevTools의 Performance 탭
console.time()과 같은 성능 측정 도구
성능 저하 원인 파악분석 결과를 바탕으로 성능 저하의 원인을 탐구합니다.예를 들어, 불필요한 렌더링, 메모리 과다 사용, 이벤트 처리 성능 문제 등을 조사합니다.
최적화 적용성능 저하를 개선하기 위해 다음과 같은 최적화 기법을 적용합니다.
React.memo, useMemo, useCallback 사용
리스트 렌더링에 Virtualization 적용 (react-window 등 사용)
코드 분할(Code Splitting)과 동적 로딩
상태 관리 도구의 적절한 활용 (Context API 최적화, Redux Toolkit 등)
필요에 따라 추가적인 최적화 기법 사용
결과 보고서 작성최적화 전후의 성능 데이터를 비교하여 결과를 정리합니다.
성능 지표 변화 (렌더링 시간, 메모리 사용량 등)
사용한 최적화 기법과 관련 코드 설명
최적화로 인한 사용자 경험 변화 분석`}
        />
        <VStack
          spacing={spacingVars.moderate}
          align={StackAlign.START}
        >
          <Typo.Moderate weight={Weight.SEMIBOLD}>제출 인원</Typo.Moderate>
          <VStack
            spacing={spacingVars.petite}
            align={StackAlign.START}
          >
            <Filter
              filters={[
                {
                  label: '상태',
                  options: [
                    {
                      label: '제출 완료',
                      icon: GlyphIcon.CHECK,
                      value: '제출 완료',
                    },
                    {
                      label: '취소',
                      icon: GlyphIcon.BLOCK,
                      value: '취소',
                    },
                  ],
                },
                getContestFilterGroup(),
              ]}
            />
            <Grid
              gap={spacingVars.petite}
              columnCount={3}
            >
              <HomeworkCard
                isSubmitted
                unit={Unit.DESIGNER}
                files={[
                  'https://minio-s4008w0wsg40sg48o0wwscc8.apne2a.algorix.cloud/tapie-management-system/AppCleaner_3.6.8.zip',
                  'https://minio-s4008w0wsg40sg48o0wwscc8.apne2a.algorix.cloud/tapie-management-system/datepicker-context.png',
                ]}
                member={{
                  studentId: 10417,
                  name: '신유준',
                }}
                date={Temporal.PlainDateTime.from({
                  year: 2024,
                  month: 12,
                  day: 23,
                  hour: 11,
                  minute: 58,
                })}
              />
              {Array.from({ length: 5 }).map((_, index) => (
                <HomeworkCard
                  key={index}
                  unit={Unit.DEVELOPER}
                  isSubmitted={false}
                  files={[
                    'https://minio-s4008w0wsg40sg48o0wwscc8.apne2a.algorix.cloud/tapie-management-system/AppCleaner_3.6.8.zip',
                    'https://minio-s4008w0wsg40sg48o0wwscc8.apne2a.algorix.cloud/tapie-management-system/2024학년도고등학교학사일정현황(탑재용).pdf',
                  ]}
                  member={{
                    studentId: 10417,
                    name: '신유준',
                  }}
                  date={Temporal.PlainDateTime.from({
                    year: 2024,
                    month: 12,
                    day: 23,
                    hour: 11,
                    minute: 58,
                  })}
                />
              ))}
            </Grid>
          </VStack>
        </VStack>
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/homework/page.css.ts
================
import { style } from '@vanilla-extract/css';

export const title = style({
  cursor: 'pointer',
});

================
File: packages/admin/src/app/(dashboard)/homework/page.tsx
================
'use client';

import * as s from './page.css';

import {
  Badge,
  Button,
  ButtonSize,
  colorVars,
  DataTable,
  Filter,
  GlyphIcon,
  HStack,
  spacingVars,
  StackAlign,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { useRouter } from 'next/navigation';
import { type ChangeEvent, useState } from 'react';
import PageTemplate from '../../../components/page-template';
import { Status, Unit } from '../../../lib/enum';
import {
  getContestFilterGroup,
  getStatusIcon,
  getStatusTheme,
  getUnitIcon,
} from '../../../lib/enum/utils';
import { getPath, resolvePath } from '../../../lib/pathmap';
import { pathMap } from '../../../lib/pathmap/map';

interface HomeworkDateType {
  title: string;
  status: Status;
  unit: Unit;
  fromDate: string;
  toDate: string;
}

export const homeworkData: HomeworkDateType[] = [
  {
    title: '리액트 성능 최적화',
    status: Status.IN_PROGRESS,
    unit: Unit.DEVELOPER,
    fromDate: '2025-01-01',
    toDate: '2025-01-01',
  },
  {
    title: '리액트 라우터 기초 및 개념 정리',
    status: Status.CONFIRMED,
    unit: Unit.DESIGNER,
    fromDate: '2025-01-01',
    toDate: '2025-01-01',
  },
  {
    title: '리액트 라우터 기초 및 개념 정리',
    status: Status.CONFIRMED,
    unit: Unit.DESIGNER,
    fromDate: '2025-01-01',
    toDate: '2025-01-01',
  },
];

export default function HomeworkPage() {
  const router = useRouter();
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  return (
    <PageTemplate
      hasSearch
      title='과제'
      count={172}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        spacing={spacingVars.petite}
      >
        <HStack
          fullWidth
          justify={StackJustify.BETWEEN}
          align={StackAlign.START}
        >
          <Filter
            filters={[
              {
                label: '상태',
                options: [Status.CONFIRMED, Status.CANCELED, Status.IN_PROGRESS].map(status => ({
                  label: status,
                  icon: getStatusIcon(status),
                  value: status,
                })),
              },
              getContestFilterGroup(),
            ]}
          />
          <Button.Default
            leadingIcon={GlyphIcon.ADD}
            size={ButtonSize.SMALL}
          >
            과제 등록
          </Button.Default>
        </HStack>
        <DataTable
          showIndex
          data={homeworkData}
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: index => {
                router.push(resolvePath(pathMap.homework, index));
              },
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'title',
              label: '제목',
              width: 250,
              isSortable: true,
              cell: (title, index) => {
                const handleNavigate = () => {
                  router.push(getPath(pathMap.homework) + `/${index}`);
                };

                return (
                  <Typo.Petite
                    weight={Weight.MEDIUM}
                    className={s.title}
                    onClick={handleNavigate}
                  >
                    {title}
                  </Typo.Petite>
                );
              },
            },
            {
              key: 'status',
              label: '상태',
              width: 120,
              isSortable: true,
              cell: status => {
                return (
                  <Badge.Default
                    label={status}
                    leadingIcon={getStatusIcon(status)}
                    theme={getStatusTheme(status)}
                  />
                );
              },
            },
            {
              key: 'unit',
              label: '유닛',
              width: 100,
              isSortable: true,
              cell: unit => (
                <Badge.Default
                  label={unit}
                  leadingIcon={getUnitIcon(unit)}
                />
              ),
            },
            {
              key: 'fromDate',
              label: '시작일',
              width: 100,
              isSortable: true,
              cell: fromDate => <Typo.Tiny color={colorVars.content.default}>{fromDate}</Typo.Tiny>,
            },
            {
              key: 'toDate',
              label: '마감일',
              width: 100,
              isSortable: true,
              cell: fromDate => <Typo.Tiny color={colorVars.content.default}>{fromDate}</Typo.Tiny>,
            },
          ]}
        />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/member/[id]/page.tsx
================
import { BrandIcon, GlyphIcon, spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import { use } from 'react';
import PageTemplate from '../../../../components/page-template';
import { Executive, Unit } from '../../../../lib/enum';
import { type Member } from '../../../../lib/types';
import MemberDetailActionSection from '../../../../sections/member/detail/Action';
import MemberDetailBasicInfoSection from '../../../../sections/member/detail/BasicInfo';
import MemberDetailInfoSection from '../../../../sections/member/detail/Info';
import { Skill } from '../../../../sections/member/detail/Info/shared';
import MemberDetailSummarySection from '../../../../sections/member/detail/Summary';

export default function MemberDetailPage({
  params,
}: {
  params: Promise<{
    id: number;
  }>;
}) {
  const { id } = use(params);

  const member: Member = {
    studentId: 10404,
    name: '권지원',
  };

  const unit = Unit.DEVELOPER;
  const executive = Executive.MANAGER;
  const generation = 119;

  return (
    <PageTemplate title='부원 상세'>
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <MemberDetailSummarySection
          member={member}
          unit={unit}
          executive={executive}
          generation={generation}
          profileImage='https://www.jwkwon0817.me/_next/image?url=%2Fassets%2Fprofile.png&w=256&q=75'
          stats={[46, 46, 46, 46]}
        />
        <MemberDetailBasicInfoSection />
        <MemberDetailActionSection />
        <MemberDetailInfoSection
          profileLink={[
            {
              label: 'Github',
              link: 'https://github.com/tapie-kr',
              icon: BrandIcon.GITHUB,
            },
          ]}
          awards={[
            {
              contestName: '1회 무슨무슨 대회',
              gradeLabel: '우수상',
              grade: 2,
              memberCount: 5,
            },
          ]}
          portfolio={[
            {
              title: '선린투데이',
              tags: [
                {
                  name: 'Badge',
                  icon: GlyphIcon.DEFAULT,
                },
                {
                  name: 'Badge',
                  icon: GlyphIcon.DEFAULT,
                },
                {
                  name: 'Badge',
                  icon: GlyphIcon.DEFAULT,
                },
                {
                  name: 'Badge',
                  icon: GlyphIcon.DEFAULT,
                },
              ],
              memberCount: 3,
              viewCount: 81,
              downloadCount: 52,
            },
          ]}
          skill={[
            {
              name: 'Github',
              type: Skill.DEVELOPMENT,
              icon: BrandIcon.GITHUB,
            },
          ]}
          history={[
            {
              label: 'Github',
              link: 'https://github.com/tapie-kr',
              isImportant: true,
            },
          ]}
        />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/member/page.tsx
================
'use client';

import { Filter, Grid, spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import { type ChangeEvent, useState } from 'react';
import MemberCard from '../../../components/card/member';
import PageTemplate from '../../../components/page-template';
import { Executive, Unit } from '../../../lib/enum';
import { getContestFilterGroup } from '../../../lib/enum/utils';

export default function MemberPage() {
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  return (
    <PageTemplate
      hasSearch
      title='부원'
      count={20}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        align={StackAlign.START}
        spacing={spacingVars.jumbo}
      >
        <Filter filters={[getContestFilterGroup()]} />
        <Grid
          columnCount={3}
          gap={spacingVars.petite}
        >
          <MemberCard
            executive={Executive.MANAGER}
            unit={Unit.DEVELOPER}
            generation={119}
            profileImage='https://www.jwkwon0817.me/_next/image?url=%2Fassets%2Fprofile.png&w=256&q=75'
            member={{
              studentId: 10404,
              name: '권지원',
            }}
          />
          {Array.from({ length: 5 }).map((_, index) => (
            <MemberCard
              key={index}
              isGraduated
              unit={Unit.DEVELOPER}
              generation={119}
              profileImage='https://www.jwkwon0817.me/_next/image?url=%2Fassets%2Fprofile.png&w=256&q=75'
              member={{
                studentId: 10404,
                name: '권지원',
              }}
            />
          ))}
        </Grid>
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/portfolio/[id]/page.tsx
================
import { spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import { use } from 'react';
import PageTemplate from '../../../../components/page-template';
import PortfolioDetailBannerSection from '../../../../sections/portfolio/detail/Banner';
import PortfolioDetailFormSection from '../../../../sections/portfolio/detail/Form';
import PortfolioDetailInfoSection from '../../../../sections/portfolio/detail/Info';

export default function PortfolioDetailPage({
  params,
}: {
  params: Promise<{
    id: number;
  }>;
}) {
  const { id } = use(params);

  return (
    <PageTemplate title='포트폴리오 상세'>
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <PortfolioDetailBannerSection
          title='선린투데이'
          catchphrase='선린투데이는 선린인터넷고등학교 학생들을 위한 정보 제공 플랫폼입니다.'
          image='https://tapie.kr/thumbnails/sunrin_today.webp'
        />
        <PortfolioDetailFormSection />
        <PortfolioDetailInfoSection info={[{ label: 'https://github.com/tapie-kr' }]} />
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/portfolio/page.tsx
================
'use client';

import { Filter, GlyphIcon, Grid, spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

import { type ChangeEvent, useState } from 'react';
import PortfolioCard from '../../../components/card/portfolio';
import PageTemplate from '../../../components/page-template';
import { getContestFilterGroup, getStatusFilterGroup } from '../../../lib/enum/utils';

export default function PortfolioPage() {
  const [searchValue, setSearchValue] = useState('');

  const handleSearchValue = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchValue(e.target.value);
  };

  return (
    <PageTemplate
      hasSearch
      title='포트폴리오'
      count={20}
      searchValue={searchValue}
      onChangeSearchValue={handleSearchValue}
    >
      <VStack
        fullWidth
        spacing={spacingVars.jumbo}
        align={StackAlign.START}
      >
        <Filter filters={[getStatusFilterGroup(), getContestFilterGroup()]} />
        <Grid
          columnCount={3}
          gap={spacingVars.petite}
        >
          {Array.from({ length: 6 }).map((_, index) => (
            <PortfolioCard
              key={index}
              title='선린투데이'
              image='https://tapie.kr/thumbnails/sunrin_today.webp'
              catchphrase='선린투데이는 선린인터넷고등학교 학생들을 위한 정보 제공 플랫폼입니다.'
              tags={[
                {
                  name: 'Badge',
                  icon: GlyphIcon.DEFAULT,
                },
                { name: 'Badge' },
                { name: 'Badge' },
                { name: 'Badge' },
              ]}
            />
          ))}
        </Grid>
      </VStack>
    </PageTemplate>
  );
}

================
File: packages/admin/src/app/(dashboard)/layout.css.ts
================
import { style } from '@vanilla-extract/css';

export const layout = style({
  height: '100vh',
  overflow: 'hidden',
});

export const content = style({
  overflowY: 'auto',
  height: '100%',
});

================
File: packages/admin/src/app/(dashboard)/layout.tsx
================
import * as s from './layout.css';

import { Box, HStack } from '@tapie-kr/inspire-react';

import Sidebar from '@tapie-kr/dashboard-shared/layout/sidebar';
import { pathMap, sidebarMap } from '@/lib/pathmap';

export default function RootLayout(props: {
  children: React.ReactNode;
}) {
  return (
    <>
      <HStack
        fullWidth
        fullHeight
        className={s.layout}
      >
        <Sidebar
          pathMap={pathMap}
          sidebarMap={sidebarMap}
        />
        <Box
          fullWidth
          fullHeight
          className={s.content}
        >
          {props.children}
        </Box>
      </HStack>
    </>
  );
}

================
File: packages/admin/src/app/(dashboard)/page.css.ts
================
import { colorVars } from "@tapie-kr/inspire-react";
import { style } from "@vanilla-extract/css";

export const container = style({
    width: 300,
});

export const footer = style({
  position: 'absolute',
  bottom: 24,
  color: colorVars.content.muted,
});

================
File: packages/admin/src/app/(dashboard)/page.tsx
================
import * as s from './page.css';

import {
  BrandIcon,
  Button,
  HStack,
  spacingVars,
  StackAlign,
  TAPIESymbol,
  TAPIESymbolSize,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

export default function IndexPage() {
  return (
    <HStack
      fullWidth
      fullHeight
    >
      <VStack
        spacing={spacingVars.moderate}
        className={s.container}
        align={StackAlign.START}
      >
        <VStack
          spacing={spacingVars.tiny}
          align={StackAlign.START}
        >
          <TAPIESymbol
            size={TAPIESymbolSize._16}
            hasLabel
          />
          <Typo.Medium weight={Weight.BOLD}>관리 시스템</Typo.Medium>
        </VStack>
        <Button.Default
          fullWidth
          leadingIcon={BrandIcon.GOOGLE}
        >
          Google로 TAPIE 로그인
        </Button.Default>
      </VStack>
      <VStack
        spacing={spacingVars.micro}
        className={s.footer}
      >
        <Typo.Micro>© 2025 TAPIE. All rights reserved.</Typo.Micro>
        <Typo.Mini>
          로그인 시도 및 접속 기록은 모두 수집되며 비정상적인 활동 감지시 TAPIE는 대응을 위해 해당
          기록을 활용할 수 있습니다.
        </Typo.Mini>
      </VStack>
    </HStack>
  );
}

================
File: packages/admin/src/app/layout.css.ts
================
import { style } from '@vanilla-extract/css';

export const body = style({
  width: '100%',
  height: '100vh',
});

================
File: packages/admin/src/app/layout.tsx
================
import * as s from './layout.css';

import { InspireProvider } from '@tapie-kr/inspire-react/provider';

import { type Metadata } from 'next';
import { ThemeProvider } from 'next-themes';

export const metadata: Metadata = {
  title:       'TAPIE 관리 시스템',
  description: 'TAPIE Management System',
};

export default function RootLayout(props: {
  children: React.ReactNode;
}) {
  return (
    <>
      <html suppressHydrationWarning>
        <body className={s.body}>
          <ThemeProvider>
            <InspireProvider>{props.children}</InspireProvider>
          </ThemeProvider>
        </body>
      </html>
    </>
  );
}

================
File: packages/admin/src/app/not-found.css.ts
================
import { colorVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  background: colorVars.surface.default,
  position: 'relative',
});

export const footer = style({
  position: 'absolute',
  bottom: 24,
  color: colorVars.content.muted,
});

================
File: packages/admin/src/app/not-found.tsx
================
'use client';

import * as s from './not-found.css';

import {
  Button,
  ButtonSize,
  ButtonVariant,
  colorVars,
  GlyphIcon,
  HStack,
  spacingVars,
  TAPIESymbol,
  TAPIESymbolSize,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';
import { useRouter } from 'next/navigation';

export default function NotFoundPage() {
  const router = useRouter();

  const handleClick = () => {
    router.back();
  };

  return (
    <HStack
      className={s.base}
      fullWidth
      fullHeight
    >
      <VStack spacing={spacingVars.medium}>
        <TAPIESymbol
          size={TAPIESymbolSize._24}
          hasLabel
        />
        <VStack spacing={spacingVars.petite}>
          <Typo.Medium weight={Weight.MEDIUM}>404 Not Found</Typo.Medium>
          <Typo.Base
            weight={Weight.MEDIUM}
            color={colorVars.content.muted}
          >
            존재하지 않는 페이지입니다.
          </Typo.Base>
        </VStack>
        <Button.Default
          leadingIcon={GlyphIcon.ARROW_BACK}
          variant={ButtonVariant.SECONDARY}
          size={ButtonSize.MEDIUM}
          onClick={handleClick}
        >
          뒤로 돌아가기
        </Button.Default>
      </VStack>

      <VStack
        spacing={spacingVars.micro}
        className={s.footer}
      >
        <Typo.Micro>© 2025 TAPIE. All rights reserved.</Typo.Micro>
        <Typo.Mini>
          로그인 시도 및 접속 기록은 모두 수집되며 비정상적인 활동 감지시 TAPIE는 대응을 위해 해당
          기록을 활용할 수 있습니다.
        </Typo.Mini>
      </VStack>
    </HStack>
  );
}

================
File: packages/admin/src/components/breadcrumb/index.tsx
================
'use client';

import * as s from './style.css';

import {
  colorVars,
  GlyphIcon,
  HStack,
  Icon,
  spacingVars,
  StackAlign,
  Typo,
  Weight,
} from '@tapie-kr/inspire-react';

import { usePathname, useRouter } from 'next/navigation';
import { getPathList } from '../../lib/pathmap';

interface BreadcrumbProps {
  root?: string;
  hasRootLabel?: boolean;
  hasLeadingIcon?: boolean;
  leadingIcon?: GlyphIcon;
  className?: string;
}

export default function Breadcrumb(props: BreadcrumbProps) {
  const {
    root = 'Root',
    hasRootLabel = false,
    hasLeadingIcon = true,
    leadingIcon = GlyphIcon.HOME,
  } = props;

  const router = useRouter();
  const currentPath = usePathname();
  const items = getPathList(currentPath);
  const hasOnlyRoot = items.length === 0;

  const handleClickRoot = () => {
    router.push('/');
  };

  return (
    <HStack
      spacing={spacingVars.tiny}
      align={StackAlign.CENTER}
      className={props.className}
    >
      <HStack
        spacing={spacingVars.tiny}
        align={StackAlign.CENTER}
        className={s.button}
        onClick={handleClickRoot}
      >
        {hasLeadingIcon && (
          <Icon
            name={leadingIcon}
            size={16}
            color={hasOnlyRoot ? colorVars.content.emphasized : colorVars.content.default}
          />
        )}
        {hasRootLabel && (
          <Typo.Petite
            weight={hasOnlyRoot ? Weight.SEMIBOLD : Weight.MEDIUM}
            color={hasOnlyRoot ? colorVars.content.emphasized : colorVars.content.default}
          >
            {root}
          </Typo.Petite>
        )}
      </HStack>
      {items.map((item, index) => {
        const isLast = index === items.length - 1;

        const handleClick = () => {
          router.push(item.href);
        };

        return (
          <HStack
            key={index}
            spacing={spacingVars.tiny}
            align={StackAlign.CENTER}
          >
            <Icon
              name={GlyphIcon.CHEVRON_RIGHT}
              size={16}
              color={colorVars.content.muted}
            />
            <Typo.Petite
              className={s.button}
              weight={isLast ? Weight.SEMIBOLD : Weight.MEDIUM}
              color={isLast ? colorVars.content.emphasized : colorVars.content.default}
              onClick={handleClick}
            >
              {item.title}
            </Typo.Petite>
          </HStack>
        );
      })}
    </HStack>
  );
}

================
File: packages/admin/src/components/breadcrumb/style.css.ts
================
import { style } from '@vanilla-extract/css';

export const button = style({
  cursor: 'pointer',
  userSelect: 'none',
});

================
File: packages/admin/src/components/card/achievement/index.tsx
================
import * as s from './style.css';

import {
  Badge,
  BadgeSize,
  colorVars,
  HStack,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { useRouter } from 'next/navigation';
import { type Contest } from '../../../lib/enum';
import { getContestIcon } from '../../../lib/enum/utils';
import { resolvePath } from '../../../lib/pathmap';
import { pathMap } from '../../../lib/pathmap/map';
import { type Garde, type Member } from '../../../lib/types';
import { getGradeIcon, getGradeTheme } from '../../../lib/types/utils';

interface AchievementCardProps {
  contestName: string;
  members: Member[];
  grade: Garde;
  year: number;
  contestType: Contest;
}

export default function AchievementCard(props: AchievementCardProps) {
  const { contestName, members, grade, year, contestType } = props;

  const router = useRouter();

  const getMemberString = () => {
    if (members.length <= 3) {
      return members.map(member => member.name).join(', ');
    } else {
      return `${members
        .slice(0, 3)
        .map(member => member.name)
        .join(', ')} 외 ${members.length - 3}명`;
    }
  };

  const handleClick = () => {
    router.push(resolvePath(pathMap.achievement, 1));
  };

  return (
    <VStack
      spacing={spacingVars.petite}
      className={s.base}
      align={StackAlign.START}
      onClick={handleClick}
    >
      <VStack
        spacing={spacingVars.optical}
        align={StackAlign.START}
      >
        <Typo.Petite weight={Weight.SEMIBOLD}>{contestName}</Typo.Petite>
        <Typo.Tiny color={colorVars.content.default}>{getMemberString()}</Typo.Tiny>
      </VStack>
      <HStack spacing={spacingVars.tiny}>
        <Badge.Default
          theme={getGradeTheme(grade)}
          leadingIcon={getGradeIcon()}
          size={BadgeSize.SMALL}
          label={grade.gradeLabel}
        />
        <Badge.Default
          size={BadgeSize.SMALL}
          label={`${year}년`}
        />
        <Badge.Default
          size={BadgeSize.SMALL}
          label={contestType}
          leadingIcon={getContestIcon(contestType)}
        />
      </HStack>
    </VStack>
  );
}

================
File: packages/admin/src/components/card/achievement/style.css.ts
================
import {
  colorVars,
  getShorthandedValue,
  radiusVars,
  spacingVars,
  utilityClass,
} from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style([
  utilityClass.interactive,
  {
    width: 250,
    padding: spacingVars.base,
    background: colorVars.surface.default,
    border: getShorthandedValue('1px', 'solid', colorVars.line.border),
    borderRadius: radiusVars.smooth,
  },
]);

================
File: packages/admin/src/components/card/announcement/index.tsx
================
import * as s from './style.css';

import {
  Badge,
  BadgeSize,
  BadgeTheme,
  GlyphIcon,
  HStack,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type Temporal } from '@js-temporal/polyfill';
import { getDateString } from '../../../lib/utils/date';

interface AnnouncementCardProps {
  content: string;
  isSent: boolean;
  isNotice: boolean;
  date: Temporal.PlainDateTime;
}

export default function AnnouncementCard(props: AnnouncementCardProps) {
  const { content, isSent, isNotice, date } = props;

  return (
    <VStack
      className={s.base}
      spacing={spacingVars.petite}
      align={StackAlign.START}
    >
      <Typo.Petite weight={Weight.SEMIBOLD}>{content}</Typo.Petite>
      <HStack spacing={spacingVars.tiny}>
        {isSent && (
          <Badge.Default
            theme={BadgeTheme.GREEN}
            size={BadgeSize.SMALL}
            label='전송됨'
            leadingIcon={GlyphIcon.CHECK}
          />
        )}
        {isNotice && (
          <Badge.Default
            theme={BadgeTheme.RED}
            size={BadgeSize.SMALL}
            label='공지'
            leadingIcon={GlyphIcon.NOTIFICATIONS}
          />
        )}
        <Badge.Default
          size={BadgeSize.SMALL}
          label={getDateString(date, true)}
          leadingIcon={GlyphIcon.TODAY}
        />
      </HStack>
    </VStack>
  );
}

================
File: packages/admin/src/components/card/announcement/style.css.ts
================
import { colorVars, getShorthandedValue, radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  width: 300,
  padding: spacingVars.base,
  borderRadius: radiusVars.smooth,
  border: getShorthandedValue('1px', 'solid', colorVars.line.border),
  background: colorVars.surface.default,
});

================
File: packages/admin/src/components/card/application/index.tsx
================
'use client';

import * as s from './style.css';

import {
  Badge,
  BadgeSize,
  BadgeTheme,
  colorVars,
  GlyphIcon,
  HStack,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type Temporal } from '@js-temporal/polyfill';
import { useRouter } from 'next/navigation';
import { type Unit } from '../../../lib/enum';
import { getUnitIcon } from '../../../lib/enum/utils';
import { resolvePath } from '../../../lib/pathmap';
import { pathMap } from '../../../lib/pathmap/map';
import { type Member } from '../../../lib/types';
import { getMemberString } from '../../../lib/types/utils';
import { getDateString } from '../../../lib/utils/date';

interface ApplicationCardProps {
  member: Member;
  content: string;
  unit: Unit;
  date: Temporal.PlainDateTime;
  hasPortfolio?: boolean;
}

export default function ApplicationCard(props: ApplicationCardProps) {
  const { member, content, unit, date, hasPortfolio = true } = props;

  const router = useRouter();

  const handleNavigate = () => {
    router.push(resolvePath(pathMap.application, 3, 4));
  };

  return (
    <VStack
      className={s.base}
      spacing={spacingVars.petite}
      align={StackAlign.START}
      onClick={handleNavigate}
    >
      <VStack
        spacing={spacingVars.optical}
        align={StackAlign.START}
      >
        <Typo.Petite weight={Weight.SEMIBOLD}>{getMemberString(member)}</Typo.Petite>
        <Typo.Tiny color={colorVars.content.default}>{content}</Typo.Tiny>
      </VStack>
      <HStack spacing={spacingVars.tiny}>
        <Badge.Default
          size={BadgeSize.SMALL}
          label={unit}
          leadingIcon={getUnitIcon(unit)}
        />
        <Badge.Default
          size={BadgeSize.SMALL}
          label={`${getDateString(date, true)} 제출`}
          leadingIcon={GlyphIcon.TODAY}
        />
        <Badge.Default
          size={BadgeSize.SMALL}
          label='포트폴리오'
          theme={hasPortfolio ? BadgeTheme.GREEN : BadgeTheme.RED}
          leadingIcon={hasPortfolio ? GlyphIcon.CHECK : GlyphIcon.CLOSE}
        />
      </HStack>
    </VStack>
  );
}

================
File: packages/admin/src/components/card/application/style.css.ts
================
import {
  colorVars,
  getShorthandedValue,
  radiusVars,
  spacingVars,
  utilityClass,
} from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style([
  utilityClass.interactive,
  {
    width: 300,
    padding: spacingVars.base,
    borderRadius: radiusVars.smooth,
    border: getShorthandedValue('1px', 'solid', colorVars.line.border),
    background: colorVars.surface.default,
  },
]);

================
File: packages/admin/src/components/card/attendance/stat/index.tsx
================
import * as s from './style.css';

import {
  colorVars,
  GlyphIcon,
  HStack,
  Icon,
  spacingVars,
  StackAlign,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';
import { AttendanceUnit } from '../shared';

interface AttendanceStatProps {
  count: number;
  unit: AttendanceUnit;
}

export default function AttendanceStatCard(props: AttendanceStatProps) {
  const { count, unit } = props;

  const isMonth = unit === AttendanceUnit.MONTH;

  return (
    <HStack
      spacing={spacingVars.petite}
      className={s.card}
      justify={StackJustify.START}
      align={StackAlign.START}
    >
      <VStack
        spacing={spacingVars.optical}
        align={StackAlign.START}
        fullWidth
      >
        <Typo.Base weight={Weight.SEMIBOLD}>{count}명</Typo.Base>
        <Typo.Tiny color={colorVars.content.default}>
          이번 {isMonth ? '달' : '년도'} 결석 수
        </Typo.Tiny>
      </VStack>
      <Icon
        name={isMonth ? GlyphIcon.TODAY : GlyphIcon.CALENDAR_TODAY}
        size={24}
      />
    </HStack>
  );
}

================
File: packages/admin/src/components/card/attendance/stat/style.css.ts
================
import { colorVars, getShorthandedValue, radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const card = style({
  width: 190,
  border: getShorthandedValue('1px', 'solid', colorVars.line.border),
  borderRadius: radiusVars.smooth,
  background: colorVars.surface.default,
  padding: spacingVars.base,
});

================
File: packages/admin/src/components/card/attendance/index.tsx
================
import * as s from './style.css';

import {
  Button,
  ButtonSize,
  ButtonVariant,
  colorVars,
  GlyphIcon,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type Member } from '../../../lib/types/member';
import { getMemberString } from '../../../lib/types/utils';

interface AttendanceCardProps {
  member: Member;
  day: number;
  count: number;
  isAbsent?: boolean;
}

export default function AttendanceCard(props: AttendanceCardProps) {
  const { member, day, count, isAbsent = false } = props;

  const dayString = day < 7 ? `${day}일` : `${~~(day / 7)}주`;

  return (
    <VStack
      className={s.base}
      spacing={spacingVars.petite}
      align={StackAlign.START}
    >
      <VStack
        spacing={spacingVars.optical}
        align={StackAlign.START}
      >
        <Typo.Petite weight={Weight.SEMIBOLD}>{getMemberString(member)}</Typo.Petite>
        <Typo.Tiny color={colorVars.content.default}>
          {dayString} 연속 출석, {count}번 결석
        </Typo.Tiny>
      </VStack>
      <Button.Default
        fullWidth
        size={ButtonSize.SMALL}
        variant={ButtonVariant.SECONDARY}
        leadingIcon={isAbsent ? GlyphIcon.ERROR : GlyphIcon.WARNING}
      >
        {isAbsent ? '결석 처리된 부원' : '결석 처리하기'}
      </Button.Default>
    </VStack>
  );
}

================
File: packages/admin/src/components/card/attendance/shared.ts
================
export enum AttendanceUnit {
  MONTH = 'month',
  YEAR = 'year',
}

================
File: packages/admin/src/components/card/attendance/style.css.ts
================
import { colorVars, getShorthandedValue, radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  width: 250,
  padding: spacingVars.base,
  borderRadius: radiusVars.smooth,
  border: getShorthandedValue('1px', 'solid', colorVars.line.border),
  background: colorVars.surface.default,
});

================
File: packages/admin/src/components/card/homework/index.tsx
================
import * as s from './style.css';

import {
  AspectRatio,
  Badge,
  BadgeSize,
  BadgeTheme,
  colorVars,
  GlyphIcon,
  HStack,
  Image,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type Temporal } from '@js-temporal/polyfill';
import { type Unit } from '../../../lib/enum';
import { getUnitIcon } from '../../../lib/enum/utils';
import { type Member } from '../../../lib/types';
import { getMemberString } from '../../../lib/types/utils';
import { getDateString } from '../../../lib/utils/date';

interface HomeworkCardProps {
  member: Member;
  unit: Unit;
  isSubmitted: boolean;
  files: string[];
  date: Temporal.PlainDateTime;
}

const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'];

export default function HomeworkCard(props: HomeworkCardProps) {
  const { member, isSubmitted, unit, files, date } = props;

  const isImage = (file: string) => {
    const extension = file.split('.').pop()?.split('/')[0];

    return extension && imageExtensions.includes(extension);
  };

  const hasImage = files.some(file => isImage(file));
  const firstImage = files.find(file => isImage(file));

  return (
    <VStack
      className={s.base}
      spacing={spacingVars.base}
      align={StackAlign.START}
    >
      <AspectRatio
        fullWidth
        ratio={16 / 9}
        className={s.preview}
      >
        {hasImage && firstImage ? (
          <Image
            fullWidth
            fullHeight
            src={firstImage}
            alt='Preview Image'
          />
        ) : (
          <HStack
            fullWidth
            fullHeight
            className={s.previewNoImage}
          >
            <Typo.Tiny
              weight={Weight.MEDIUM}
              color={colorVars.content.default}
            >
              미리보기 지원 안함
            </Typo.Tiny>
          </HStack>
        )}
      </AspectRatio>
      <VStack
        spacing={spacingVars.base}
        align={StackAlign.START}
      >
        <VStack
          spacing={spacingVars.mini}
          align={StackAlign.START}
        >
          <Badge.Default
            label={unit}
            leadingIcon={getUnitIcon(unit)}
            size={BadgeSize.SMALL}
          />
          <Typo.Petite weight={Weight.SEMIBOLD}>{getMemberString(member)}</Typo.Petite>
        </VStack>
        <VStack
          spacing={spacingVars.tiny}
          align={StackAlign.START}
        >
          <HStack spacing={spacingVars.tiny}>
            <Badge.Default
              label={isSubmitted ? '제출 완료' : '제출 실패'}
              size={BadgeSize.SMALL}
              theme={isSubmitted ? BadgeTheme.GREEN : BadgeTheme.RED}
              leadingIcon={isSubmitted ? GlyphIcon.CHECK : GlyphIcon.CLOSE}
            />
            <Badge.Default
              label={`첨부파일 ${files.length}개`}
              leadingIcon={GlyphIcon.FOLDER}
            />
          </HStack>
          <Badge.Default
            label={`${getDateString(date, false)} 제출`}
            leadingIcon={GlyphIcon.SCHEDULE}
          />
        </VStack>
      </VStack>
    </VStack>
  );
}

================
File: packages/admin/src/components/card/homework/style.css.ts
================
import { colorVars, getShorthandedValue, radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  width: 250,
  padding: spacingVars.base,
  borderRadius: radiusVars.smooth,
  border: getShorthandedValue('1px', 'solid', colorVars.line.border),
  background: colorVars.surface.default,
});

export const preview = style({
  borderRadius: radiusVars.subtle,
  overflow: 'hidden',
});

export const previewNoImage = style({
  background: colorVars.surface.raised,
});

================
File: packages/admin/src/components/card/member/index.tsx
================
import * as s from './style.css';

import {
  AspectRatio,
  Badge,
  BadgeSize,
  colorVars,
  GlyphIcon,
  HStack,
  Icon,
  Image,
  spacingVars,
  StackAlign,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { useRouter } from 'next/navigation';
import { type Executive, type Unit } from '../../../lib/enum';
import { getExecutiveIcon, getExecutiveTheme, getUnitIcon } from '../../../lib/enum/utils';
import { resolvePath } from '../../../lib/pathmap';
import { pathMap } from '../../../lib/pathmap/map';
import { type Member } from '../../../lib/types';
import { getMemberString } from '../../../lib/types/utils';

interface MemberCardProps {
  profileImage: string;
  member: Member;
  executive?: Executive;
  unit: Unit;
  generation: number;
  isGraduated?: boolean;
}

export default function MemberCard(props: MemberCardProps) {
  const { profileImage, member, executive, unit, generation, isGraduated = false } = props;

  const router = useRouter();

  const handleClick = () => {
    router.push(resolvePath(pathMap.member, 5));
  };

  return (
    <HStack
      spacing={spacingVars.base}
      className={s.base}
      justify={StackJustify.START}
      onClick={handleClick}
    >
      <AspectRatio
        ratio={1 / 1}
        width={60}
        className={s.image}
      >
        <Image
          fullWidth
          fullHeight
          src={profileImage}
          alt={member.name}
        />
      </AspectRatio>
      <VStack
        spacing={spacingVars.tiny}
        align={StackAlign.START}
      >
        <HStack spacing={spacingVars.mini}>
          <Typo.Base weight={Weight.SEMIBOLD}>{getMemberString(member)}</Typo.Base>
          <Icon
            name={GlyphIcon.ARROW_FORWARD}
            size={14}
            color={colorVars.content.default}
          />
        </HStack>
        <HStack spacing={spacingVars.tiny}>
          {executive && (
            <Badge.Default
              leadingIcon={getExecutiveIcon()}
              theme={getExecutiveTheme()}
              label={executive}
              size={BadgeSize.SMALL}
            />
          )}
          <Badge.Default
            leadingIcon={getUnitIcon(unit)}
            label={unit}
            size={BadgeSize.SMALL}
          />
          <Badge.Default
            leadingIcon={GlyphIcon.SCHOOL}
            label={`${generation}기${isGraduated ? ' (졸업)' : ''}`}
            size={BadgeSize.SMALL}
          />
        </HStack>
      </VStack>
    </HStack>
  );
}

================
File: packages/admin/src/components/card/member/style.css.ts
================
import {
  colorVars,
  getShorthandedValue,
  radiusVars,
  spacingVars,
  utilityClass,
} from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style([
  utilityClass.interactive,
  {
    width: 300,
    padding: spacingVars.base,
    borderRadius: radiusVars.default,
    border: getShorthandedValue('1px', 'solid', colorVars.line.border),
  },
]);

export const image = style({
  borderRadius: radiusVars.full,
  overflow: 'hidden',
});

================
File: packages/admin/src/components/card/portfolio/index.tsx
================
import * as s from './style.css';

import {
  AspectRatio,
  Badge,
  BadgeSize,
  colorVars,
  HStack,
  type IconName,
  Image,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { useRouter } from 'next/navigation';
import { resolvePath } from '../../../lib/pathmap';
import { pathMap } from '../../../lib/pathmap/map';

interface PortfolioCardProps {
  title: string;
  tags: {
    name: string;
    icon?: IconName;
  }[];
  image: string;
  catchphrase: string;
}

export default function PortfolioCard(props: PortfolioCardProps) {
  const { title, tags, image, catchphrase } = props;

  const router = useRouter();

  const handleClick = () => {
    router.push(resolvePath(pathMap.portfolio, 3));
  };

  return (
    <VStack
      spacing={spacingVars.base}
      className={s.base}
      align={StackAlign.START}
      onClick={handleClick}
    >
      <AspectRatio
        fullWidth
        fullHeight
        ratio={16 / 9}
        className={s.image}
      >
        <Image
          fullWidth
          fullHeight
          src={image}
          alt={title}
        />
      </AspectRatio>
      <VStack
        spacing={spacingVars.optical}
        align={StackAlign.START}
      >
        <Typo.Petite weight={Weight.SEMIBOLD}>{title}</Typo.Petite>
        <Typo.Tiny color={colorVars.content.default}>{catchphrase}</Typo.Tiny>
      </VStack>
      <HStack spacing={spacingVars.tiny}>
        {tags.map((tag, index) => (
          <Badge.Default
            key={index}
            leadingIcon={tag.icon}
            label={tag.name}
            size={BadgeSize.SMALL}
          />
        ))}
      </HStack>
    </VStack>
  );
}

================
File: packages/admin/src/components/card/portfolio/style.css.ts
================
import {
  colorVars,
  getShorthandedValue,
  radiusVars,
  spacingVars,
  utilityClass,
} from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style([
  utilityClass.interactive,
  {
    width: 250,
    padding: spacingVars.base,
    borderRadius: radiusVars.smooth,
    border: getShorthandedValue('1px', 'solid', colorVars.line.border),
    background: colorVars.surface.default,
  },
]);

export const image = style({
  borderRadius: radiusVars.subtle,
  overflow: 'hidden',
});

================
File: packages/admin/src/components/header/index.tsx
================
import * as s from './style.css';

import {
  Box,
  ButtonSize,
  GlyphIcon,
  HStack,
  IconButton,
  Input,
  InputSize,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';
import { type ChangeEventHandler } from 'react';
import Breadcrumb from '../breadcrumb';

export interface HeaderProps {
  title: string;
  hasCount?: boolean;
  count?: number;
  hasSearch?: boolean;
  searchValue?: string;
  onChangeSearchValue?: ChangeEventHandler<HTMLInputElement>;
}

export default function Header(props: HeaderProps) {
  const {
    title,
    hasCount = true,
    count,
    hasSearch = true,
    searchValue,
    onChangeSearchValue: handleSearchValue,
  } = props;

  return (
    <VStack
      spacing={spacingVars.medium}
      align={StackAlign.START}
    >
      <Breadcrumb />
      <VStack
        spacing={spacingVars.base}
        align={StackAlign.START}
      >
        <HStack spacing={spacingVars.micro}>
          <Typo.Medium weight={Weight.BOLD}>{title}</Typo.Medium>
          {hasCount && <Typo.Moderate weight={Weight.SEMIBOLD}>{count}</Typo.Moderate>}
        </HStack>
        {hasSearch && handleSearchValue && (
          <HStack spacing={spacingVars.mini}>
            <Box className={s.searchInput}>
              <Input.Text
                value={searchValue}
                onChange={handleSearchValue}
                placeholder={`${title} 검색`}
                size={InputSize.MEDIUM}
              />
            </Box>
            <IconButton
              icon={GlyphIcon.ARROW_FORWARD}
              size={ButtonSize.MEDIUM}
            />
          </HStack>
        )}
      </VStack>
    </VStack>
  );
}

================
File: packages/admin/src/components/header/style.css.ts
================
import { style } from '@vanilla-extract/css';

export const searchInput = style({
  width: 300,
});

================
File: packages/admin/src/components/page-template/index.tsx
================
'use client';

import * as s from './style.css';

import {
  HStack,
  spacingVars,
  StackJustify,
  VStack,
} from '@tapie-kr/inspire-react';

import { AnimatedVStack } from '../../lib/animate';
import Header, { type HeaderProps } from '../header';

interface PageTemplateProps extends HeaderProps {
  children: React.ReactNode;
}

export default function PageTemplate(props: PageTemplateProps) {
  const {
    title,
    count,
    hasSearch = true,
    hasCount = true,
    searchValue,
    onChangeSearchValue: handleSearchValue,
  } = props;

  return (
    <AnimatedVStack
      fullWidth
      justify={StackJustify.START}
      className={s.base}
      transition={{ duration: 0.5 }}
      initial={{
        opacity: 0,
        y:       20,
      }}
      animate={{
        opacity: 1,
        y:       0,
      }}
    >
      <VStack
        fullWidth
        className={s.container}
        spacing={spacingVars.jumbo}
      >
        <HStack
          fullWidth
          justify={StackJustify.START}
        >
          <Header
            title={title}
            count={count}
            hasCount={hasCount}
            hasSearch={hasSearch}
            searchValue={searchValue}
            onChangeSearchValue={handleSearchValue}
          />
        </HStack>
        {props.children}
      </VStack>
    </AnimatedVStack>
  );
}

================
File: packages/admin/src/components/page-template/style.css.ts
================
import { getShorthandedValue, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  padding: getShorthandedValue(spacingVars.large, spacingVars.base),
});

export const container = style({
  maxWidth: 1000,
});

================
File: packages/admin/src/lib/enum/announcement/index.tsx
================
export enum Announcement {
  NOTICE = '공지',
  MESSAGE = '메시지',
}

================
File: packages/admin/src/lib/enum/announcement/utils.ts
================
import { GlyphIcon, type IconName } from '@tapie-kr/inspire-react';
import { Announcement } from '.';

export const getAnnouncementIcon = (announcement: Announcement) => {
  const announcementIcon: {
    [key in Announcement]: IconName;
  } = {
    [Announcement.MESSAGE]: GlyphIcon.SEND,
    [Announcement.NOTICE]: GlyphIcon.NOTIFICATIONS,
  };

  return announcementIcon[announcement];
};

================
File: packages/admin/src/lib/enum/contest/index.ts
================
export enum Contest {
  INTERNAL = '교내대회',
  EXTERNAL = '외부대회',
}

================
File: packages/admin/src/lib/enum/contest/utils.ts
================
import { type FilterGroup, GlyphIcon, type IconName } from '@tapie-kr/inspire-react';
import { Contest } from '.';

export const getContestIcon = (contest: Contest) => {
  const contestIcon: {
    [key in Contest]: IconName;
  } = {
    [Contest.INTERNAL]: GlyphIcon.SCHOOL,
    [Contest.EXTERNAL]: GlyphIcon.EXPLORE,
  };

  return contestIcon[contest];
};

export const getContestFilterGroup = (): FilterGroup => {
  return {
    label: '대회',
    options: Object.values(Contest).map(contest => ({
      label: contest,
      value: contest,
      icon: getContestIcon(contest),
    })),
  };
};

================
File: packages/admin/src/lib/enum/executive/index.ts
================
export enum Executive {
  MANAGER = '부장',
  CO_MANAGER = '부부장',
}

================
File: packages/admin/src/lib/enum/executive/utils.ts
================
import { BadgeTheme, GlyphIcon, type IconName } from '@tapie-kr/inspire-react';

export const getExecutiveTheme = () => {
  return BadgeTheme.GREEN;
};

export const getExecutiveIcon = (): IconName => {
  return GlyphIcon.VERIFIED;
};

================
File: packages/admin/src/lib/enum/status/index.ts
================
export enum Status {
  CONFIRMED = '완료',
  CANCELED = '취소',
  SCHEDULED = '예정',
  POSTPONED = '연기됨',
  IN_PROGRESS = '진행중',
}

================
File: packages/admin/src/lib/enum/status/utils.ts
================
import { BadgeTheme, type FilterGroup, GlyphIcon, type IconName } from '@tapie-kr/inspire-react';
import { Status } from '.';

export const getStatusIcon = (status: Status): IconName => {
  const statusIcon: {
    [key in Status]: IconName;
  } = {
    [Status.CONFIRMED]: GlyphIcon.CHECK,
    [Status.CANCELED]: GlyphIcon.BLOCK,
    [Status.SCHEDULED]: GlyphIcon.FLAG,
    [Status.POSTPONED]: GlyphIcon.ERROR,
    [Status.IN_PROGRESS]: GlyphIcon.SCHOOL,
  };

  return statusIcon[status];
};

export const getStatusTheme = (status: Status): BadgeTheme => {
  const statusTheme: {
    [key in Status]: BadgeTheme;
  } = {
    [Status.CONFIRMED]: BadgeTheme.GREEN,
    [Status.CANCELED]: BadgeTheme.RED,
    [Status.SCHEDULED]: BadgeTheme.MONOCHROME,
    [Status.POSTPONED]: BadgeTheme.YELLOW,
    [Status.IN_PROGRESS]: BadgeTheme.BLUE,
  };

  return statusTheme[status];
};

export const getStatusFilterGroup = (): FilterGroup => {
  return {
    label: '상태',
    options: Object.values(Status).map(status => ({
      label: status,
      icon: getStatusIcon(status),
      value: status,
    })),
  };
};

================
File: packages/admin/src/lib/enum/unit/index.ts
================
export enum Unit {
  DEVELOPER = '개발자',
  DESIGNER = '디자이너',
}

================
File: packages/admin/src/lib/enum/unit/utils.ts
================
import { type FilterGroup, GlyphIcon, type IconName } from '@tapie-kr/inspire-react';
import { Unit } from '.';

export const getUnitIcon = (unit: Unit): IconName => {
  const unitIcon: {
    [key in Unit]: IconName;
  } = {
    [Unit.DEVELOPER]: GlyphIcon.CODE,
    [Unit.DESIGNER]: GlyphIcon.BRUSH,
  };

  return unitIcon[unit];
};

export const getUnitFilterGroup = (): FilterGroup => {
  return {
    label: '유닛',
    options: Object.values(Unit).map(unit => ({
      label: unit,
      value: unit,
      icon: getUnitIcon(unit),
    })),
  };
};

================
File: packages/admin/src/lib/enum/index.ts
================
export * from './executive';
export * from './status';
export * from './unit';
export * from './contest';
export * from './announcement';

================
File: packages/admin/src/lib/enum/utils.ts
================
export * from './status/utils';
export * from './unit/utils';
export * from './executive/utils';
export * from './contest/utils';
export * from './announcement/utils';

================
File: packages/admin/src/lib/pathmap/index.ts
================
import { PathMap } from '@tapie-kr/dashboard-shared/lib/pathmap';
import { PathNode } from '@tapie-kr/dashboard-shared/lib/pathmap/types';

export const pathMap = {
  home:  { index: '홈' },
  class: {
    index: '수업',
    board: { index: '게시판' },
  },
  homework: {
    index:    '과제',
    fallback: { index: '수업 상세' },
  },
  attendance: { index: '출석' },
  member:     {
    index:    '부원',
    fallback: { index: '부원 상세' },
  },
  portfolio: {
    index:    '포트폴리오',
    fallback: { index: '포트폴리오 상세' },
  },
  achievement: {
    index:    '수상실적',
    fallback: { index: '수상실적 상세' },
  },
  application: {
    index:    '신청폼',
    fallback: {
      index:    '신청폼 응답',
      fallback: { index: '신청폼 응답 상세' },
    },
  },
  announcement: { index: '공지사항' },
  statistics:   {
    index:     '통계',
    site:      { index: '사이트' },
    portfolio: { index: '포트폴리오' },
    profile:   { index: '부원 프로필' },
  },
  metadata: {
    index:      '메타데이터',
    contest:    { index: '대회' },
    asset:      { index: '에셋' },
    technology: { index: '기술' },
  },
} as const satisfies {
  [key: string]: PathNode;
};

export const sidebarMap = [
  pathMap.home,
  {
    title:    '수업',
    children: [
      pathMap.class,
      pathMap.homework,
      pathMap.attendance,
    ],
  },
  {
    title:    '관리',
    children: [
      pathMap.member,
      pathMap.portfolio,
      pathMap.achievement,
      pathMap.application,
    ],
  },
  {
    title:    '기타',
    children: [
      pathMap.announcement,
      pathMap.statistics,
      pathMap.metadata,
    ],
  },
];

export const map = new PathMap(pathMap);

================
File: packages/admin/src/lib/types/grade/index.ts
================
export interface Garde {
  grade: number;
  gradeLabel: string;
}

================
File: packages/admin/src/lib/types/grade/utils.ts
================
import { BadgeTheme, GlyphIcon, type IconName } from '@tapie-kr/inspire-react';
import { type Garde } from '.';

export const getGradeTheme = (grade: Garde): BadgeTheme => {
  const gradeTheme: {
    [key in number]: BadgeTheme;
  } = {
    [1]: BadgeTheme.RED,
    [2]: BadgeTheme.YELLOW,
    [3]: BadgeTheme.BLUE,
  };

  return gradeTheme[grade.grade] || BadgeTheme.MONOCHROME;
};

export const getGradeIcon = (): IconName => {
  return GlyphIcon.TROPHY;
};

================
File: packages/admin/src/lib/types/member/index.ts
================
export interface Member {
  studentId: number;
  name: string;
}

================
File: packages/admin/src/lib/types/member/utils.ts
================
import { type Member } from '.';

const getMemberString = (member: Member) => {
  return `${member.studentId} ${member.name}`;
};

export { getMemberString };

================
File: packages/admin/src/lib/types/index.ts
================
export * from './member';
export * from './grade';

================
File: packages/admin/src/lib/types/utils.ts
================
export * from './member/utils';
export * from './grade/utils';

================
File: packages/admin/src/lib/utils/date.ts
================
import { type Temporal } from '@js-temporal/polyfill';

export const getPaddingZero = (num: number): string => {
  return String(num).padStart(2, '0');
};

export const getDateString = (date: Temporal.PlainDateTime, containYear: boolean) => {
  if (containYear) {
    return `${date.year}-${getPaddingZero(date.month)}-${getPaddingZero(date.day)} ${getPaddingZero(date.hour)}:${getPaddingZero(date.minute)}`;
  } else {
    return `${getPaddingZero(date.month)}월 ${getPaddingZero(date.day)}일 ${getPaddingZero(date.hour)}:${getPaddingZero(date.minute)}`;
  }
};

================
File: packages/admin/src/sections/achievement/detail/Action/index.tsx
================
import {
  Button,
  ButtonSize,
  ButtonVariant,
  GlyphIcon,
  HStack,
  spacingVars,
  Theme,
} from '@tapie-kr/inspire-react';

export default function AchievementDetailActionSection() {
  return (
    <HStack spacing={spacingVars.petite}>
      <Button.Default
        size={ButtonSize.SMALL}
        leadingIcon={GlyphIcon.ADD}
      >
        변경사항 저장하기
      </Button.Default>
      <Button.Default
        variant={ButtonVariant.SECONDARY}
        size={ButtonSize.SMALL}
        theme={Theme.RED}
        leadingIcon={GlyphIcon.DELETE}
      >
        수상실적 삭제하기
      </Button.Default>
    </HStack>
  );
}

================
File: packages/admin/src/sections/achievement/detail/ContestSegment/index.tsx
================
import { Segment, SegmentGroup } from '@tapie-kr/inspire-react';

import { Contest } from '../../../../lib/enum';
import { getContestIcon } from '../../../../lib/enum/utils';

export default function AchievementDetailContestSegment() {
  return (
    <SegmentGroup defaultValue={Contest.INTERNAL}>
      <Segment
        leadingIcon={getContestIcon(Contest.INTERNAL)}
        label={Contest.INTERNAL}
        value={Contest.INTERNAL}
      />
      <Segment
        leadingIcon={getContestIcon(Contest.EXTERNAL)}
        label={Contest.EXTERNAL}
        value={Contest.EXTERNAL}
      />
    </SegmentGroup>
  );
}

================
File: packages/admin/src/sections/achievement/detail/Form/index.tsx
================
import * as s from './style.css';

import { FormField, Input, spacingVars, VStack } from '@tapie-kr/inspire-react';

export default function AchievementDetailFormSection() {
  return (
    <VStack
      spacing={spacingVars.medium}
      className={s.base}
    >
      <FormField
        label={'대회 이름'}
        isEssential
      >
        <Input.Text placeholder={'대회 이름 입력'} />
      </FormField>
      <FormField
        label={'등급'}
        isEssential
      >
        <Input.Text placeholder={'등급 입력 (ex. 1)'} />
      </FormField>
      <FormField
        label={'등급 이름'}
        isEssential
      >
        <Input.Text placeholder={'등급 이름 입력 (ex. 최우수상)'} />
      </FormField>
    </VStack>
  );
}

================
File: packages/admin/src/sections/achievement/detail/Form/style.css.ts
================
import { style } from '@vanilla-extract/css';

export const base = style({
  width: 350,
});

================
File: packages/admin/src/sections/achievement/detail/Info/index.tsx
================
'use client';

import * as s from './style.css';

import {
  Box,
  ButtonSize,
  colorVars,
  DataTable,
  GlyphIcon,
  HStack,
  IconButton,
  Input,
  InputSize,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';
import { type AchievementDetailInfo } from './shared';

interface AchievementDetailInfoSectionProps {
  info: AchievementDetailInfo[];
}

export default function AchievementDetailInfoSection(props: AchievementDetailInfoSectionProps) {
  const { info } = props;

  const getGradeString = (studentId: number) => {
    const studentIdString = studentId.toString();

    return studentIdString.slice(0, 1) + '학년';
  };

  return (
    <VStack
      spacing={spacingVars.mini}
      fullWidth
      align={StackAlign.START}
    >
      <HStack spacing={spacingVars.micro}>
        <Box className={s.input}>
          <Input.Text
            placeholder={'참여 부원을 입력하세요'}
            size={InputSize.MEDIUM}
          />
        </Box>
        <IconButton
          size={ButtonSize.SMALL}
          icon={GlyphIcon.ADD}
        />
      </HStack>
      <DataTable
        showIndex
        actions={[
          {
            icon: GlyphIcon.EDIT,
            onClick: () => {},
          },
          {
            icon: GlyphIcon.DELETE,
            onClick: () => {},
          },
        ]}
        columns={[
          {
            key: 'member',
            label: '참여 부원',
            width: 500,
            isSortable: true,
            cell: member => (
              <HStack spacing={spacingVars.micro}>
                <Typo.Petite weight={Weight.MEDIUM}>{member.name}</Typo.Petite>
                <Typo.Petite
                  weight={Weight.MEDIUM}
                  color={colorVars.content.muted}
                >
                  {getGradeString(member.studentId)}
                </Typo.Petite>
              </HStack>
            ),
          },
        ]}
        data={info}
      />
    </VStack>
  );
}

================
File: packages/admin/src/sections/achievement/detail/Info/shared.ts
================
import { type Member } from '../../../../lib/types';

export interface AchievementDetailInfo {
  member: Member;
}

================
File: packages/admin/src/sections/achievement/detail/Info/style.css.ts
================
import { style } from '@vanilla-extract/css';

export const input = style({
  width: 350,
});

================
File: packages/admin/src/sections/announcement/Form/index.tsx
================
'use client';

import * as s from './style.css';

import {
  Button,
  ButtonSize,
  FormField,
  GlyphIcon,
  HStack,
  Input,
  Segment,
  SegmentGroup,
  spacingVars,
  StackAlign,
  VStack,
} from '@tapie-kr/inspire-react';

import { useState } from 'react';
import { Announcement } from '../../../lib/enum';
import { getAnnouncementIcon } from '../../../lib/enum/utils';

export default function AnnouncementFormSection() {
  const [currentType, setCurrentType] = useState<Announcement>(Announcement.NOTICE);

  const handleToggleType = () => {
    setCurrentType((prevType: Announcement) => {
      return prevType === Announcement.NOTICE ? Announcement.MESSAGE : Announcement.NOTICE;
    });
  };

  return (
    <VStack
      spacing={spacingVars.moderate}
      align={StackAlign.START}
      className={s.base}
    >
      <SegmentGroup
        defaultValue={Announcement.NOTICE}
        onChange={handleToggleType}
      >
        {Object.values(Announcement).map(type => (
          <Segment
            key={type}
            value={type}
            label={type}
            leadingIcon={getAnnouncementIcon(type)}
          />
        ))}
      </SegmentGroup>
      {currentType === Announcement.MESSAGE ? <MessageForm /> : <NoticeForm />}
      <Button.Default
        size={ButtonSize.MEDIUM}
        leadingIcon={getAnnouncementIcon(currentType)}
      >
        {currentType} 전송하기
      </Button.Default>
    </VStack>
  );
}

function NoticeForm() {
  return (
    <VStack
      fullWidth
      spacing={spacingVars.moderate}
      align={StackAlign.START}
    >
      <FormField
        isEssential
        label='공지 내용'
      >
        <Input.Text placeholder='공지 내용 입력' />
      </FormField>
      <FormField
        isEssential
        label='사유'
      >
        <Input.Text placeholder='공지 사유 입력' />
      </FormField>
      <HStack className={s.fileUpload}>
        <FormField label='파일 업로드'>
          <Input.File.Draggable
            placeholder='사진 업로드'
            leadingIcon={GlyphIcon.UPLOAD}
          />
        </FormField>
      </HStack>
    </VStack>
  );
}

function MessageForm() {
  return (
    <VStack
      fullWidth
      spacing={spacingVars.moderate}
      align={StackAlign.START}
    >
      <FormField
        isEssential
        label='메세지 내용'
      >
        <Input.Text placeholder='메세지 입력' />
      </FormField>
      <FormField
        isEssential
        label='사유'
      >
        <Input.Text placeholder='메세지 사유 입력' />
      </FormField>
    </VStack>
  );
}

================
File: packages/admin/src/sections/announcement/Form/style.css.ts
================
import { style } from '@vanilla-extract/css';

export const base = style({
  width: 500,
});

export const fileUpload = style({
  width: 280,
});

================
File: packages/admin/src/sections/announcement/History/index.tsx
================
import { Grid, spacingVars, StackAlign, Typo, VStack, Weight } from '@tapie-kr/inspire-react';

import { Temporal } from '@js-temporal/polyfill';
import AnnouncementCard from '../../../components/card/announcement';

export default function AnnouncementHistorySection() {
  return (
    <VStack
      spacing={spacingVars.medium}
      align={StackAlign.START}
    >
      <Typo.Medium weight={Weight.SEMIBOLD}>기록</Typo.Medium>
      <Grid
        columnCount={3}
        gap={spacingVars.petite}
      >
        {Array.from({ length: 4 }).map((_, index) => (
          <AnnouncementCard
            key={index}
            isSent
            isNotice
            content='룰렛 안걸려서 오늘 수업 없습니다. 집으로 귀가하세요'
            date={Temporal.PlainDateTime.from({
              year: 2025,
              month: 3,
              day: 27,
              hour: 6,
              minute: 17,
            })}
          />
        ))}
      </Grid>
    </VStack>
  );
}

================
File: packages/admin/src/sections/application/detail/Action/index.tsx
================
import {
  Button,
  ButtonSize,
  ButtonVariant,
  GlyphIcon,
  HStack,
  spacingVars,
  Theme,
} from '@tapie-kr/inspire-react';

export default function ApplicationDetailActionSection() {
  return (
    <HStack spacing={spacingVars.petite}>
      <Button.Default
        size={ButtonSize.SMALL}
        leadingIcon={GlyphIcon.ADD}
      >
        합격 처리
      </Button.Default>
      <Button.Default
        variant={ButtonVariant.SECONDARY}
        size={ButtonSize.SMALL}
        theme={Theme.RED}
        leadingIcon={GlyphIcon.DELETE}
      >
        삭제
      </Button.Default>
    </HStack>
  );
}

================
File: packages/admin/src/sections/application/detail/Info/index.tsx
================
import * as s from './style.css';

import {
  Badge,
  BadgeSize,
  colorVars,
  GlyphIcon,
  HStack,
  Segment,
  spacingVars,
  StackAlign,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type JSX } from 'react';
import { type Unit } from '../../../../lib/enum';
import { getUnitIcon } from '../../../../lib/enum/utils';

type PersonalInfo = {
  name: string;
  studentId: number;
  googleEmail: string;
  phoneNumber: string;
};

type ApplicationInfo = {
  unit: Unit;
  introduction: string;
  motivation: string;
  expectedActivities: string;
  reasonToChoose: string;
};

interface ApplicationDetailInfoSectionProps {
  personalInfo: PersonalInfo;
  applicationInfo: ApplicationInfo;
  portfolio: string[];
}

export default function ApplicationDetailInfoSection(props: ApplicationDetailInfoSectionProps) {
  const { personalInfo, applicationInfo, portfolio } = props;

  return (
    <VStack
      spacing={spacingVars.moderate}
      className={s.base}
    >
      <InfoGroup
        title='개인 정보'
        spacing={spacingVars.petite}
        content={[
          {
            label: '이름',
            value: personalInfo.name,
          },
          {
            label: '학번',
            value: personalInfo.studentId.toString(),
          },
          {
            label: '구글 이메일',
            value: personalInfo.googleEmail,
          },
          {
            label: '전화번호',
            value: personalInfo.phoneNumber,
          },
        ]}
      />
      <InfoGroup
        title='지원 정보'
        spacing={spacingVars.moderate}
        content={[
          {
            label: '유닛',
            value: applicationInfo.unit,
            render: () => (
              <Badge.Default
                size={BadgeSize.SMALL}
                label={applicationInfo.unit}
                leadingIcon={getUnitIcon(applicationInfo.unit)}
              />
            ),
          },
          {
            label: '자기소개',
            value: applicationInfo.introduction,
          },
          {
            label: '지원 동기',
            value: applicationInfo.motivation,
          },
          {
            label: '기대되는 활동',
            value: applicationInfo.expectedActivities,
          },
          {
            label: '뽑아야하는 이유',
            value: applicationInfo.reasonToChoose,
          },
        ]}
      />
      <VStack
        fullWidth
        spacing={spacingVars.tiny}
        align={StackAlign.START}
      >
        <Typo.Tiny
          weight={Weight.MEDIUM}
          color={colorVars.content.muted}
        >
          포트폴리오
        </Typo.Tiny>
        <HStack spacing={spacingVars.tiny}>
          {portfolio.map((item, index) => (
            <Segment
              key={index}
              label={item}
              value={item}
              leadingIcon={GlyphIcon.FOLDER}
            />
          ))}
        </HStack>
      </VStack>
    </VStack>
  );
}

type InfoGroupContent = {
  label: string;
  value: string;
  render?: () => JSX.Element;
};

interface InfoGroupProps {
  title: string;
  content: InfoGroupContent[];
  spacing: string;
}

function InfoGroup(props: InfoGroupProps) {
  const { title, content, spacing } = props;

  return (
    <VStack
      fullWidth
      spacing={spacingVars.tiny}
      align={StackAlign.START}
    >
      <Typo.Tiny
        weight={Weight.MEDIUM}
        color={colorVars.content.muted}
      >
        {title}
      </Typo.Tiny>
      <VStack
        fullWidth
        spacing={spacing}
        align={StackAlign.START}
      >
        {content.map((item, index) => (
          <HStack
            key={index}
            spacing={spacingVars.micro}
            align={StackAlign.START}
          >
            <HStack
              justify={StackJustify.START}
              className={s.label}
              align={StackAlign.START}
            >
              <Typo.Micro weight={Weight.SEMIBOLD}>{item.label}</Typo.Micro>
            </HStack>
            <HStack
              fullWidth
              justify={StackJustify.START}
              align={StackAlign.START}
              className={s.content}
            >
              {item.render ? (
                item.render()
              ) : (
                <Typo.Micro
                  weight={Weight.MEDIUM}
                  color={colorVars.content.muted}
                >
                  {item.value}
                </Typo.Micro>
              )}
            </HStack>
          </HStack>
        ))}
      </VStack>
    </VStack>
  );
}

================
File: packages/admin/src/sections/application/detail/Info/style.css.ts
================
import { colorVars, radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  padding: spacingVars.base,
  borderRadius: radiusVars.smooth,
  background: colorVars.surface.clear,
});

export const label = style({
  width: 120,
});

export const content = style({
  width: 700,
});

================
File: packages/admin/src/sections/homework/detail/Content/index.tsx
================
import * as s from './style.css';

import {
  Button,
  ButtonSize,
  ButtonVariant,
  colorVars,
  GlyphIcon,
  HStack,
  Input,
  InputSize,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

interface HomeworkDetailContentSectionProps {
  content: string;
}

export default function HomeworkDetailContentSection(props: HomeworkDetailContentSectionProps) {
  const { content } = props;

  return (
    <VStack
      spacing={spacingVars.petite}
      align={StackAlign.START}
    >
      <VStack
        spacing={spacingVars.base}
        className={s.detail}
        align={StackAlign.START}
        fullWidth
      >
        <VStack
          spacing={spacingVars.tiny}
          align={StackAlign.START}
          fullWidth
        >
          <Typo.Tiny
            weight={Weight.MEDIUM}
            color={colorVars.content.muted}
          >
            과제 내용
          </Typo.Tiny>
          <Typo.Micro weight={Weight.MEDIUM}>
            {content.split('\n').map((line, index) => (
              <>
                {line}
                {content.split('\n').length - 1 > index && <br />}
              </>
            ))}
          </Typo.Micro>
        </VStack>
        <VStack
          spacing={spacingVars.tiny}
          align={StackAlign.START}
          fullWidth
          className={s.fileUpload}
        >
          <Typo.Tiny
            weight={Weight.MEDIUM}
            color={colorVars.content.muted}
          >
            첨부 파일
          </Typo.Tiny>
          <Input.File
            size={InputSize.MEDIUM}
            leadingIcon={GlyphIcon.UPLOAD}
            placeholder={'과제 파일 업로드'}
          />
        </VStack>
      </VStack>
      <HStack spacing={spacingVars.petite}>
        <Button.Default
          size={ButtonSize.SMALL}
          leadingIcon={GlyphIcon.CHECK}
        >
          과제 채점하기
        </Button.Default>
        <Button.Default
          size={ButtonSize.SMALL}
          variant={ButtonVariant.SECONDARY}
          leadingIcon={GlyphIcon.CLOSE}
        >
          과제 닫기
        </Button.Default>
      </HStack>
    </VStack>
  );
}

================
File: packages/admin/src/sections/homework/detail/Content/style.css.ts
================
import { colorVars, radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const detail = style({
  width: 600,
  background: colorVars.surface.clear,
  borderRadius: radiusVars.smooth,
  padding: spacingVars.base,
});

export const fileUpload = style({
  width: 250,
});

================
File: packages/admin/src/sections/member/detail/Action/index.tsx
================
import {
  Button,
  colorVars,
  GlyphIcon,
  HStack,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

export default function MemberDetailActionSection() {
  return (
    <VStack
      spacing={spacingVars.petite}
      align={StackAlign.START}
    >
      <Button.Default leadingIcon={GlyphIcon.INBOX}>신청폼 조회</Button.Default>
      <HStack spacing={spacingVars.petite}>
        <Footnote text={'2025-01-01 제출됨'} />
        <Footnote text={'2025-01-01 수정됨'} />
      </HStack>
    </VStack>
  );
}

interface FootnoteProps {
  text: string;
}

function Footnote(props: FootnoteProps) {
  return (
    <Typo.Tiny
      color={colorVars.content.muted}
      weight={Weight.MEDIUM}
    >
      {props.text}
    </Typo.Tiny>
  );
}

================
File: packages/admin/src/sections/member/detail/BasicInfo/index.tsx
================
import {
  FormField,
  HStack,
  ImagePreviewShape,
  Input,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

export default function MemberDetailBasicInfoSection() {
  return (
    <VStack
      spacing={spacingVars.base}
      align={StackAlign.START}
      fullWidth
      fullHeight
    >
      <Typo.Moderate weight={Weight.SEMIBOLD}>기본 정보</Typo.Moderate>
      <HStack
        fullWidth
        fullHeight
        spacing={spacingVars.medium}
        align={StackAlign.START}
      >
        <VStack
          spacing={spacingVars.moderate}
          fullWidth
        >
          <FormField
            label={'이름'}
            isEssential
          >
            <Input.Text placeholder={'이름 입력'} />
          </FormField>
          <FormField
            label={'유저네임'}
            isEssential
            description={'해당 유저네임으로 TAPIE 이메일이 생성됩니다.'}
          >
            <Input.Text placeholder={'유저네임 입력'} />
          </FormField>
          <FormField
            label={'프로필 사진'}
            isEssential
          >
            <Input.ImagePreview
              shape={ImagePreviewShape.CIRCLE}
              size={100}
            />
          </FormField>
        </VStack>
        <VStack
          spacing={spacingVars.moderate}
          fullWidth
        >
          <FormField
            label={'기수'}
            isEssential
          >
            <Input.Text placeholder={'기수 입력'} />
          </FormField>
          <FormField
            label={'유닛'}
            isEssential
          >
            <Input.Text placeholder={'유닛 입력'} />
          </FormField>
          <FormField
            label={'역할'}
            isEssential
          >
            <Input.Text placeholder={'역할 입력'} />
          </FormField>
        </VStack>
      </HStack>
    </VStack>
  );
}

================
File: packages/admin/src/sections/member/detail/Info/index.tsx
================
'use client';

import {
  Badge,
  BadgeSize,
  BadgeTheme,
  Button,
  ButtonSize,
  DataTable,
  GlyphIcon,
  HStack,
  spacingVars,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';
import {
  getSkillIcon,
  type MemberInfoAwards,
  type MemberInfoHistory,
  type MemberInfoPortfolio,
  type MemberInfoProfileLink,
  type MemberInfoSkill,
} from './shared';

interface MemberDetailInfoSectionProps {
  profileLink: MemberInfoProfileLink[];
  awards: MemberInfoAwards[];
  portfolio: MemberInfoPortfolio[];
  skill: MemberInfoSkill[];
  history: MemberInfoHistory[];
}

export default function MemberDetailInfoSection(props: MemberDetailInfoSectionProps) {
  const { profileLink, awards, portfolio, skill, history } = props;

  return (
    <VStack spacing={spacingVars.jumbo}>
      <InfoItem
        title={'프로필 링크'}
        buttonText={'링크 추가'}
      >
        <DataTable
          showIndex
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'label',
              label: '라벨',
              width: 150,
              isSortable: true,
            },
            {
              key: 'link',
              label: '링크',
              width: 300,
              isSortable: true,
            },
            {
              key: 'icon',
              label: '아이콘',
              width: 180,
              isSortable: true,
              cell: (icon, _, data) => (
                <Badge.Default
                  leadingIcon={icon}
                  label={data.label}
                />
              ),
            },
          ]}
          data={profileLink}
        />
      </InfoItem>
      <InfoItem
        title={'수상실적'}
        buttonText={'수상실적 추가'}
      >
        <DataTable
          showIndex
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'contestName',
              label: '대회 이름',
              width: 250,
              isSortable: true,
            },
            {
              key: 'gradeLabel',
              label: '등급 이름',
              width: 130,
              isSortable: true,
            },
            {
              key: 'grade',
              label: '등급',
              width: 100,
              isSortable: true,
            },
            {
              key: 'memberCount',
              label: '참여 인원',
              width: 100,
              isSortable: true,
              cell: memberCount => `${memberCount}명`,
            },
          ]}
          data={awards}
        />
      </InfoItem>
      <InfoItem
        title={'포트폴리오'}
        buttonText={'포트폴리오 추가'}
      >
        <DataTable
          showIndex
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'title',
              label: '이름',
              width: 150,
              isSortable: true,
            },
            {
              key: 'tags',
              label: '태그',
              width: 270,
              isSortable: true,
              cell: tags => (
                <HStack spacing={spacingVars.tiny}>
                  {tags.map((tag, index) => (
                    <Badge.Default
                      size={BadgeSize.SMALL}
                      label={tag.name}
                      leadingIcon={tag.icon}
                      key={index}
                    />
                  ))}
                </HStack>
              ),
            },
            {
              key: 'memberCount',
              label: '참여 인원',
              width: 100,
              isSortable: true,
              cell: viewCount => `${viewCount}명`,
            },
            {
              key: 'viewCount',
              label: '조회수',
              width: 100,
              isSortable: true,
            },
            {
              key: 'downloadCount',
              label: '다운로드 횟수',
              width: 100,
              isSortable: true,
            },
          ]}
          data={portfolio}
        />
      </InfoItem>
      <InfoItem
        title={'기술'}
        buttonText={'기술 추가'}
      >
        <DataTable
          showIndex
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'name',
              label: '이름',
              width: 200,
              isSortable: true,
            },
            {
              key: 'type',
              label: '종류',
              width: 180,
              isSortable: true,
              cell: type => (
                <Badge.Default
                  leadingIcon={getSkillIcon(type)}
                  label={type}
                />
              ),
            },
            {
              key: 'icon',
              label: '아이콘',
              width: 100,
              isSortable: true,
              cell: (icon, _, data) => (
                <Badge.Default
                  leadingIcon={icon}
                  label={data.name}
                />
              ),
            },
          ]}
          data={skill}
        />
      </InfoItem>
      <InfoItem
        title={'연혁'}
        buttonText={'연혁 추가'}
      >
        <DataTable
          showIndex
          actions={[
            {
              icon: GlyphIcon.EDIT,
              onClick: () => {},
            },
            {
              icon: GlyphIcon.DELETE,
              onClick: () => {},
            },
          ]}
          columns={[
            {
              key: 'label',
              label: '라벨',
              width: 300,
              isSortable: true,
            },
            {
              key: 'link',
              label: '링크',
              width: 200,
              isSortable: true,
            },
            {
              key: 'isImportant',
              label: '중요',
              width: 180,
              isSortable: true,
              cell: isImportant =>
                isImportant && (
                  <Badge.Default
                    leadingIcon={GlyphIcon.ASTERISK}
                    theme={BadgeTheme.RED}
                    label={'중요'}
                  />
                ),
            },
          ]}
          data={history}
        />
      </InfoItem>
    </VStack>
  );
}

interface InfoItemProps {
  title: string;
  buttonText: string;
  children: React.ReactNode;
}

function InfoItem(props: InfoItemProps) {
  const { title, buttonText, children } = props;

  return (
    <VStack spacing={spacingVars.mini}>
      <HStack
        justify={StackJustify.BETWEEN}
        fullWidth
      >
        <Typo.Moderate weight={Weight.SEMIBOLD}>{title}</Typo.Moderate>
        <Button.Default
          size={ButtonSize.SMALL}
          leadingIcon={GlyphIcon.ADD}
        >
          {buttonText}
        </Button.Default>
      </HStack>
      {children}
    </VStack>
  );
}

================
File: packages/admin/src/sections/member/detail/Info/shared.ts
================
import { GlyphIcon, type IconName } from '@tapie-kr/inspire-react';

export interface MemberInfoProfileLink {
  label: string;
  link: string;
  icon: IconName;
}

export interface MemberInfoAwards {
  contestName: string;
  gradeLabel: string;
  grade: number;
  memberCount: number;
}

interface Tag {
  name: string;
  icon: IconName;
}

export interface MemberInfoPortfolio {
  title: string;
  tags: Tag[];
  memberCount: number;
  viewCount: number;
  downloadCount: number;
}

export enum Skill {
  DEVELOPMENT = '개발',
  MANAGEMENT = '관리',
  ETC = '기타',
}

export const getSkillIcon = (skill: Skill): IconName => {
  switch (skill) {
    case Skill.DEVELOPMENT:
      return GlyphIcon.CODE;
    case Skill.MANAGEMENT:
      return GlyphIcon.FLAG;
    case Skill.ETC:
      return GlyphIcon.EDIT;
  }
};

export interface MemberInfoSkill {
  name: string;
  type: Skill;
  icon: IconName;
}

export interface MemberInfoHistory {
  label: string;
  link: string;
  isImportant: boolean;
}

================
File: packages/admin/src/sections/member/detail/Summary/index.tsx
================
import {
  AspectRatio,
  Badge,
  colorVars,
  GlyphIcon,
  HStack,
  Image,
  spacingVars,
  StackAlign,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { type Executive, type Unit } from '../../../../lib/enum';
import { getExecutiveIcon, getExecutiveTheme } from '../../../../lib/enum/utils';
import { type Member } from '../../../../lib/types';
import { getMemberString } from '../../../../lib/types/utils';

interface MemberDetailSummarySectionProps {
  profileImage: string;
  member: Member;
  unit: Unit;
  executive?: Executive;
  generation: number;
  isGraduated?: boolean;
  stats: [number, number, number, number];
}

import * as s from './style.css';

export default function MemberDetailSummarySection(props: MemberDetailSummarySectionProps) {
  const { profileImage, member, unit, executive, generation, isGraduated = false, stats } = props;

  return (
    <HStack spacing={spacingVars.giant}>
      <HStack spacing={spacingVars.moderate}>
        <AspectRatio
          ratio={1 / 1}
          width={86}
          className={s.image}
        >
          <Image
            fullWidth
            fullHeight
            src={profileImage}
            alt={member.name}
          />
        </AspectRatio>
        <VStack
          spacing={spacingVars.micro}
          align={StackAlign.START}
        >
          <HStack spacing={spacingVars.micro}>
            <Typo.Medium weight={Weight.SEMIBOLD}>{getMemberString(member)}</Typo.Medium>
            <Typo.Base
              weight={Weight.MEDIUM}
              color={colorVars.content.default}
            >
              {unit}
            </Typo.Base>
          </HStack>
          <HStack spacing={spacingVars.micro}>
            {executive && (
              <Badge.Default
                label={executive}
                theme={getExecutiveTheme()}
                leadingIcon={getExecutiveIcon()}
              />
            )}
            <Badge.Default
              label={`${generation}기${isGraduated ? ' (졸업)' : ''}`}
              leadingIcon={GlyphIcon.SCHOOL}
            />
          </HStack>
        </VStack>
      </HStack>
      <HStack spacing={spacingVars.moderate}>
        {['프로필 조회수', '포트폴리오 개수', '수상실적 개수', '기술 스택 개수'].map(
          (label, index) => (
            <Stat
              key={index}
              label={label}
              value={stats[index]}
            />
          ),
        )}
      </HStack>
    </HStack>
  );
}

interface StatProps {
  label: string;
  value: number;
}

function Stat(props: StatProps) {
  const { label, value } = props;

  return (
    <VStack
      spacing={spacingVars.optical}
      align={StackAlign.START}
    >
      <Typo.Micro
        weight={Weight.MEDIUM}
        color={colorVars.content.default}
      >
        {label}
      </Typo.Micro>
      <Typo.Medium weight={Weight.SEMIBOLD}>{value}</Typo.Medium>
    </VStack>
  );
}

================
File: packages/admin/src/sections/member/detail/Summary/style.css.ts
================
import { radiusVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const image = style({
  borderRadius: radiusVars.full,
  overflow: 'hidden',
});

================
File: packages/admin/src/sections/portfolio/detail/Banner/index.tsx
================
import {
  AspectRatio,
  Box,
  colorVars,
  GlyphIcon,
  HStack,
  Icon,
  Image,
  spacingVars,
  StackAlign,
  Typo,
  Weight,
} from '@tapie-kr/inspire-react';

interface PortfolioDetailBannerSectionProps {
  title: string;
  image: string;
  catchphrase: string;
}

import * as s from './style.css';

export default function PortfolioDetailBannerSection(props: PortfolioDetailBannerSectionProps) {
  const { title, image, catchphrase } = props;

  return (
    <>
      <Box className={s.base}>
        <AspectRatio
          ratio={694 / 250}
          fullWidth
          fullHeight
          className={s.imageContainer}
        >
          <Image
            className={s.image}
            src={image}
            alt={title}
            fullWidth
            fullHeight
          />
          <HStack
            spacing={spacingVars.base}
            align={StackAlign.END}
            className={s.content}
          >
            <Typo.Medium
              weight={Weight.SEMIBOLD}
              color={colorVars.solid.translucent.white._95}
            >
              {title}
            </Typo.Medium>
            <HStack spacing={spacingVars.mini}>
              <Typo.Base
                weight={Weight.MEDIUM}
                color={colorVars.solid.translucent.white._50}
              >
                {catchphrase}
              </Typo.Base>
              <Icon
                name={GlyphIcon.ARROW_FORWARD}
                color={colorVars.solid.translucent.white._50}
                size={18}
              />
            </HStack>
          </HStack>
        </AspectRatio>
      </Box>
    </>
  );
}

================
File: packages/admin/src/sections/portfolio/detail/Banner/style.css.ts
================
import { radiusVars, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const base = style({
  width: 694,
  height: 250,
  position: 'relative',
});

export const content = style({
  position: 'absolute',
  bottom: spacingVars.moderate,
  left: spacingVars.moderate,
  zIndex: 2,
});

export const imageContainer = style({
  borderRadius: radiusVars.smooth,
  overflow: 'hidden',
  '::before': {
    content: '""',
    position: 'absolute',
    top: 0,
    left: 0,
    display: 'block',
    zIndex: 1,
    width: '100%',
    height: '100%',
    backdropFilter: 'blur(4px)',
  },
});

export const image = style({
  position: 'relative',
});

================
File: packages/admin/src/sections/portfolio/detail/Form/index.tsx
================
import * as s from './style.css';

import { FormField, Input, spacingVars, StackAlign, VStack } from '@tapie-kr/inspire-react';

export default function PortfolioDetailFormSection() {
  return (
    <VStack
      spacing={spacingVars.jumbo}
      fullWidth
      align={StackAlign.START}
      className={s.base}
    >
      <FormField
        label={'이름'}
        isEssential
      >
        <Input.Text placeholder={'이름 입력'} />
      </FormField>
      <FormField
        label={'캐치프레이즈'}
        isEssential
      >
        <Input.Text placeholder={'캐치프레이즈 입력'} />
      </FormField>
      <FormField
        label={'설명'}
        isEssential
      >
        <Input.Paragraph
          maxLength={1000}
          placeholder={'설명 입력'}
          height={150}
        />
      </FormField>
    </VStack>
  );
}

================
File: packages/admin/src/sections/portfolio/detail/Form/style.css.ts
================
import { style } from '@vanilla-extract/css';

export const base = style({
  width: 350,
});

================
File: packages/admin/src/sections/portfolio/detail/Info/index.tsx
================
'use client';

import * as s from './style.css';

import {
  Box,
  ButtonSize,
  DataTable,
  GlyphIcon,
  HStack,
  IconButton,
  Input,
  InputSize,
  spacingVars,
  StackAlign,
  VStack,
} from '@tapie-kr/inspire-react';
import { type Info } from './shared';

interface PortfolioDetailInfoSectionProps {
  info: Info[];
}

export default function PortfolioDetailInfoSection(props: PortfolioDetailInfoSectionProps) {
  const { info } = props;

  return (
    <VStack
      spacing={spacingVars.mini}
      fullWidth
      align={StackAlign.START}
    >
      <HStack spacing={spacingVars.micro}>
        <Box className={s.input}>
          <Input.Text
            placeholder={'링크 입력'}
            size={InputSize.MEDIUM}
          />
        </Box>
        <IconButton
          size={ButtonSize.MEDIUM}
          icon={GlyphIcon.ADD}
        />
      </HStack>
      <DataTable
        showIndex
        actions={[
          {
            icon: GlyphIcon.EDIT,
            onClick: () => {},
          },
          {
            icon: GlyphIcon.DELETE,
            onClick: () => {},
          },
        ]}
        columns={[
          {
            key: 'label',
            label: '라벨',
            width: 500,
            isSortable: true,
          },
        ]}
        data={info}
      />
    </VStack>
  );
}

================
File: packages/admin/src/sections/portfolio/detail/Info/shared.ts
================
export interface Info {
  label: string;
}

================
File: packages/admin/src/sections/portfolio/detail/Info/style.css.ts
================
import { style } from '@vanilla-extract/css';

export const input = style({
  width: 350,
});

================
File: packages/admin/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

================
File: packages/admin/next.config.mjs
================
import { withTAPIEDashboardConfig } from '@tapie-kr/dashboard-shared/configs/nextjs.mjs';

export default withTAPIEDashboardConfig()

================
File: packages/admin/package.json
================
{
  "name": "@tapie-kr/admin-dashboard",
  "version": "0.0.1",
  "scripts": {
    "start": "next start",
    "build": "next build",
    "dev": "next dev -p 6678"
  },
  "author": {
    "name": "Jeewon Kwon",
    "email": "jeewon.kwon.0817@gmail.com",
    "url": "https://github.com/jwkwon0817"
  },
  "contributors": [],
  "license": "MIT",
  "homepage": "https://admin.tapie.kr/",
  "repository": {
    "type": "git",
    "url": "https://github.com/tapie-kr/dashboard.git"
  },
  "dependencies": {
    "@js-temporal/polyfill": "^0.4.4",
    "@tapie-kr/inspire-react": "^0.1.37",
    "@vanilla-extract/css": "^1.17.0",
    "classnames": "^2.5.1",
    "framer-motion": "^12.4.2",
    "next": "15.1.4",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@types/node": "^20.17.16",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3"
  }
}

================
File: packages/admin/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "@tapie-kr/dashboard-shared/*": ["../shared/*"],
      "~/*": ["../shared/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "src/types/**/*.d.ts",
    ".next/types/**/*.ts",
    "../shared/**/*.ts",
    "../shared/**/*.tsx"
, "next.config.mjs"  ],
  "exclude": ["node_modules"]
}

================
File: packages/shared/configs/nextjs.mjs
================
import { createVanillaExtractPlugin } from '@vanilla-extract/next-plugin';

/**
 * TAPIE 대시보드 웹 프로젝트를 위한 Next.js 설정을 반환합니다.
 * @param {import('next').NextConfig} config
 * @returns
 */
export function withTAPIEDashboardConfig(config = {}) {
  const withVanillaExtract = createVanillaExtractPlugin({ identifiers: 'short' });

  /** @type {import('next').NextConfig} */
  const nextConfig = {
    ...config,

    webpack(config) {
      const fileLoaderRule = config.module.rules.find(rule => rule.test?.test?.('.svg'));

      config.module.rules.push({
        ...fileLoaderRule,
        test:          /\.svg$/i,
        resourceQuery: /url/,
      },
      {
        test:          /\.svg$/i,
        issuer:        fileLoaderRule.issuer,
        resourceQuery: { not: [...fileLoaderRule.resourceQuery.not, /url/] },
        use:           ['@svgr/webpack'],
      });

      fileLoaderRule.exclude = /\.svg$/i;

      return config;
    },

    typescript: { ignoreBuildErrors: true },
  };

  return withVanillaExtract(nextConfig);
}

================
File: packages/shared/layout/sidebar/content/index.tsx
================
import { spacingVars } from '@tapie-kr/inspire-react';

import SidebarItem from '../item';
import SidebarItemGroup from '../item-group';

import { AnimatedVStack } from '~/lib/animate';
import { PathMap } from '~/lib/pathmap';
import { PathNode } from '~/lib/pathmap/types';

interface SidebarContentProps {
  pathMap:    PathMap;
  sidebarMap: SidebarItemType[];
}

export type SidebarItemType =
  | PathNode
  | {
    title:    string;
    children: PathNode[];
  };

export default function SidebarContent(props: SidebarContentProps) {
  const { pathMap, sidebarMap } = props;

  return (
    <AnimatedVStack
      fullWidth
      spacing={spacingVars.base}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.2 }}
    >
      {sidebarMap.map((item, index) => 'title' in item && Array.isArray(item.children)
        ? (
          <SidebarItemGroup
            key={index}
            title={typeof item.title === 'string' ? item.title : ''}
          >
            {item.children.map((child, childIndex) => (
              <SidebarItem
                key={childIndex}
                map={pathMap}
                href={child}
              />
            ))}
          </SidebarItemGroup>
        )
        :     (
          <SidebarItem
            key={index}
            map={pathMap}
            href={item as PathNode}
          />
        ))}
    </AnimatedVStack>
  );
}

================
File: packages/shared/layout/sidebar/item/index.tsx
================
'use client';

import * as s from './style.css';

import {
  colorVars,
  HStack,
  spacingVars,
  StackAlign,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import cn from 'classnames';
import { AnimatePresence } from 'framer-motion';
import { usePathname, useRouter } from 'next/navigation';
import SidebarSubItem from '../sub-item';

import { AnimatedVStack } from '~/lib/animate';
import {  PathMap } from '~/lib/pathmap';
import { type PathNode } from '~/lib/pathmap/types';

interface SidebarItemProps {
  map:  PathMap;
  href: PathNode;
}

export default function SidebarItem(props: SidebarItemProps) {
  const { map, href } = props;
  const title = href.index;
  const subItems = map.getSubItems(href);
  const currentPath = usePathname();
  const router = useRouter();
  const hrefPath = map.getPath(href);

  const handleClick = () => {
    router.push(hrefPath);
  };

  const isActive = hrefPath != '/' ? currentPath.startsWith(hrefPath) : currentPath === hrefPath;

  return (
    <VStack
      fullWidth
      className={s.base}
    >
      <HStack
        fullWidth
        className={cn(s.button, isActive && s.active)}
        onClick={handleClick}
      >
        <HStack
          fullWidth
          className={s.titleContainer}
          justify={StackJustify.START}
          align={StackAlign.CENTER}
        >
          <Typo.Petite
            weight={isActive ? Weight.MEDIUM : Weight.REGULAR}
            color={isActive ? colorVars.content.emphasized : colorVars.content.default}
          >
            {title}
          </Typo.Petite>
        </HStack>
      </HStack>
      <AnimatePresence>
        {isActive && subItems.length > 0 && (
          <AnimatedVStack
            fullWidth
            className={s.subItems}
            spacing={spacingVars.optical}
            initial={{
              opacity: 0,
              x:       20,
            }}
            animate={{
              opacity: 1,
              x:       0,
            }}
            exit={{
              opacity: 0,
              x:       20,
            }}
          >
            {subItems.map(subItem => {
              const path = hrefPath + '/' + subItem.href;

              return (
                <SidebarSubItem
                  key={path}
                  title={subItem.title}
                  href={path}
                />
              );
            })}
          </AnimatedVStack>
        )}
      </AnimatePresence>
    </VStack>
  );
}

================
File: packages/shared/layout/sidebar/item/style.css.ts
================
import {
  colorVars,
  getShorthandedValue,
  radiusVars,
  spacingVars,
  utilityClass,
} from '@tapie-kr/inspire-react';

import { style } from '@vanilla-extract/css';

export const base = style({});

export const button = style([
  utilityClass.interactive,
  {
    padding:      spacingVars.micro,
    borderRadius: radiusVars.subtle,
  },
]);

export const active = style({ background: colorVars.surface.elevated });
export const titleContainer = style({ padding: getShorthandedValue(0, spacingVars.tiny) });
export const subItems = style({ padding: getShorthandedValue(spacingVars.mini, 0) });

================
File: packages/shared/layout/sidebar/item-group/index.tsx
================
import * as s from './style.css';

import {
  colorVars,
  HStack,
  spacingVars,
  StackJustify,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import React from 'react';

interface SidebarItemGroupProps {
  title:    string;
  children: React.ReactNode;
}

export default function SidebarItemGroup(props: SidebarItemGroupProps) {
  const { title } = props;

  return (
    <VStack
      fullWidth
      spacing={spacingVars.mini}
    >
      <HStack
        fullWidth
        justify={StackJustify.START}
        className={s.titleContainer}
      >
        <Typo.Mini
          weight={Weight.MEDIUM}
          color={colorVars.content.muted}
        >
          {title}
        </Typo.Mini>
      </HStack>
      {props.children}
    </VStack>
  );
}

================
File: packages/shared/layout/sidebar/item-group/style.css.ts
================
import { getShorthandedValue, spacingVars } from '@tapie-kr/inspire-react';
import { style } from '@vanilla-extract/css';

export const titleContainer = style({
  padding: getShorthandedValue(0, spacingVars.micro),
  userSelect: 'none',
});

================
File: packages/shared/layout/sidebar/sub-item/index.tsx
================
import * as s from './style.css';

import {
  colorVars,
  HStack,
  StackJustify,
  Typo,
  Weight,
} from '@tapie-kr/inspire-react';

import { usePathname, useRouter } from 'next/navigation';

interface SidebarSubItemProps {
  title: string;
  href:  string;
}

export default function SidebarSubItem(props: SidebarSubItemProps) {
  const { title, href } = props;
  const router = useRouter();
  const currentPath = usePathname();
  const isActive = currentPath.startsWith(href);

  const handleClick = () => {
    router.push(href);
  };

  return (
    <HStack
      fullWidth
      className={s.base}
      justify={StackJustify.START}
      onClick={handleClick}
    >
      <Typo.Tiny
        weight={isActive ? Weight.MEDIUM : Weight.REGULAR}
        color={isActive ? colorVars.content.emphasized : colorVars.content.default}
      >
        {title}
      </Typo.Tiny>
    </HStack>
  );
}

================
File: packages/shared/layout/sidebar/sub-item/style.css.ts
================
import { getShorthandedValue, spacingVars } from '@tapie-kr/inspire-react';

import { style } from '@vanilla-extract/css';

export const base = style({
  cursor:     'pointer',
  padding:    getShorthandedValue(spacingVars.mini, spacingVars.moderate),
  userSelect: 'none',
});

================
File: packages/shared/layout/sidebar/index.tsx
================
'use client';

import * as s from './style.css';

import {
  Badge,
  BadgeSize,
  ButtonSize,
  ButtonVariant,
  colorVars,
  GlyphIcon,
  HStack,
  Icon,
  IconButton,
  spacingVars,
  StackAlign,
  StackDirection,
  StackJustify,
  TAPIESymbol,
  TAPIESymbolSize,
  Typo,
  VStack,
  Weight,
} from '@tapie-kr/inspire-react';

import { AnimatePresence, motion } from 'framer-motion';
import Link from 'next/link';
import React, { useState } from 'react';
import SidebarContent, { SidebarItemType } from './content';

import { AnimatedHStack } from '~/lib/animate';
import { PathMap } from '~/lib/pathmap';
import { PathNode } from '~/lib/pathmap/types';

interface SidebarProps {
  pathMap: {
    [key: string]: PathNode;
  };
  sidebarMap: SidebarItemType[];
}

export default function Sidebar(props: SidebarProps) {
  const { pathMap, sidebarMap } = props;
  const map = new PathMap(pathMap);
  const [collapsed, setCollapsed] = useState(false);

  const handleTogglePanel = () => {
    setCollapsed(!collapsed);
  };

  return (
    <motion.div
      layout
      initial={{ width: 250 }}
      animate={{ width: collapsed ? 60 : 250 }}
      transition={{ duration: 0.24 }}
      className={s.base}
    >
      <VStack
        fullWidth
        fullHeight
        justify={StackJustify.START}
        spacing={spacingVars.moderate}
      >
        <motion.div
          className={s.header}
          animate={{ flexDirection: collapsed ? StackDirection.COLUMN : StackDirection.ROW }}
          style={{ gap: collapsed ? spacingVars.base : 0 }}
          transition={{
            delay:    collapsed ? 0.2 : 0,
            duration: 0.3,
          }}
        >
          <Link href={map.getPath(pathMap.home)}>
            <TAPIESymbol size={TAPIESymbolSize._24} />
          </Link>
          <Icon
            name={collapsed ? GlyphIcon.LEFT_PANEL_OPEN : GlyphIcon.LEFT_PANEL_CLOSE}
            size={20}
            color={colorVars.content.default}
            onClick={handleTogglePanel}
          />
        </motion.div>
        <AnimatePresence>{!collapsed && (
          <SidebarContent
            pathMap={map}
            sidebarMap={sidebarMap}
          />
        )}
        </AnimatePresence>
      </VStack>
      <HStack
        fullWidth
        justify={StackJustify.BETWEEN}
        className={s.footer}
      >
        {!collapsed && (
          <AnimatedHStack
            className={s.info}
            spacing={spacingVars.tiny}
            align={StackAlign.CENTER}
            transition={{ duration: 0.24 }}
            initial={{
              opacity: 0,
              y:       20,
            }}
            animate={{
              opacity: 1,
              y:       0,
            }}
          >
            <Typo.Base weight={Weight.MEDIUM}>관리자님</Typo.Base>
            <Badge.Default
              size={BadgeSize.SMALL}
              label='역할'
            />
          </AnimatedHStack>
        )}
        <IconButton
          icon={GlyphIcon.LOGOUT}
          size={ButtonSize.SMALL}
          variant={ButtonVariant.SECONDARY}
        />
      </HStack>
    </motion.div>
  );
}

================
File: packages/shared/layout/sidebar/style.css.ts
================
import { colorVars, getShorthandedValue, spacingVars } from '@tapie-kr/inspire-react';

import { style } from '@vanilla-extract/css';

export const base = style({
  padding:     spacingVars.micro,
  borderRight: getShorthandedValue('1px', 'solid', colorVars.line.border),
  background:  colorVars.surface.default,
  zIndex:      99999,

  display:        'flex',
  flexDirection:  'column',
  justifyContent: 'space-between',
  alignItems:     'center',

  height: '100%',

  gap: spacingVars.base,
});

export const logo = style({ cursor: 'pointer' });

export const header = style({
  width:          '100%',
  display:        'flex',
  justifyContent: 'space-between',
  alignItems:     'center',
  padding:        spacingVars.micro,
});

export const footer = style({ padding: spacingVars.micro });
export const info = style({ padding: getShorthandedValue(0, spacingVars.mini) });

================
File: packages/shared/lib/animate/index.tsx
================
import { HStack, Stack, VStack } from '@tapie-kr/inspire-react';
import { motion } from 'framer-motion';

export const AnimatedVStack = motion.create(VStack);
export const AnimatedHStack = motion.create(HStack);
export const AnimatedStack = motion.create(Stack);

================
File: packages/shared/lib/pathmap/index.ts
================
import { type PathMapType, type PathNode } from './types';

export class PathMap {
  private map: PathMapType;

  constructor(pathMap: PathMapType) {
    this.map = pathMap;
  }
  private isPathNode(value: unknown): value is PathNode {
    return typeof value === 'object' && value !== null;
  }
  public getPath(value: PathNode | string | undefined): string {
    if (!value) return '';

    if (typeof value === 'string') return value;

    if (value === this.map.home) return '/';

    const findPathSegments = (root: PathMapType | PathNode,
      target: PathNode | string,
      segments: string[] = []): string[] | null => {
      for (const [key, val] of Object.entries(root)) {
        if (val === target) {
          return [...segments, key];
        }

        if (this.isPathNode(val)) {
          const result = findPathSegments(val, target, [...segments, key]);

          if (result) return result;
        }
      }

      return null;
    };

    const segments = findPathSegments(this.map, value);

    if (!segments) return '';

    if (segments.length === 1 && segments[0] === 'home') {
      return '/';
    }

    return '/' + segments.join('/');
  }
  public getSubItems(path: PathNode): {
    title: string; href: string;
  }[] {
    const entries = Object.entries(path);

    const filtered = entries.filter(([key, value]) => {
      return key !== 'index' && key !== 'fallback' && this.isPathNode(value);
    });

    const result = filtered.map(([key, value]) => {
      const node = value as PathNode;

      return {
        title: node.index || key,
        href:  key,
      };
    });

    return result;
  }
  public getPathNode(path: string): PathNode | undefined {
    if (path === '/' || path === '') {
      return this.map.home;
    }

    const segments = path.split('/').filter(Boolean);

    if (segments.length === 0) return undefined;

    const firstSegment = segments[0];

    let currentNode: PathNode | undefined;

    if (firstSegment in this.map) {
      const rootNode = this.map[firstSegment as keyof PathMapType];

      if (this.isPathNode(rootNode)) {
        currentNode = rootNode;
      }
    }

    return segments.slice(1).reduce<PathNode | undefined>((node, segment) => {
      if (!node) return undefined;

      const next = node[segment];

      return this.isPathNode(next) ? next : undefined;
    }, currentNode);
  }
  public getPathList(path: string): {
    title: string; href: string;
  }[] {
    if (path === '/') {
      return [];
    }

    const segments = path.split('/').filter(Boolean);

    const result: {
      title: string; href: string;
    }[] = [];

    let currentNode: PathNode | undefined;

    segments.forEach((segment, index) => {
      const currentPath = '/' + segments.slice(0, index + 1).join('/');

      if (index === 0) {
        if (segment in this.map) {
          const rootNode = this.map[segment as keyof PathMapType];

          if (this.isPathNode(rootNode)) {
            result.push({
              title: rootNode.index || segment,
              href:  currentPath,
            });

            currentNode = rootNode;
          }
        }

        return;
      }

      if (!currentNode) return;

      const nextNode = currentNode[segment];

      if (this.isPathNode(nextNode)) {
        result.push({
          title: nextNode.index || segment,
          href:  currentPath,
        });

        currentNode = nextNode;
      } else {
        let fallbackNode = currentNode;
        let depth = 0;
        let remainingSegments = segments.length - index;

        while (fallbackNode?.fallback && remainingSegments > 0) {
          const fallbackPath = '/' + segments.slice(0, index + depth + 1).join('/');

          result.push({
            title: fallbackNode.fallback.index || segments[index + depth],
            href:  fallbackPath,
          });

          fallbackNode = fallbackNode.fallback;

          remainingSegments--;

          depth++;
        }

        currentNode = undefined;
      }
    });

    return result;
  }
  public resolvePath(pathNode: PathNode,
    ...segments: (string | number | boolean)[]): string {
    return this.getPath(pathNode) + '/' + segments.join('/');
  }
}

================
File: packages/shared/lib/pathmap/types.d.ts
================
import { type pathMap } from './map';

type BasePathNode = {
  index: string;
  fallback?: BasePathNode;
};

type PathNode = {
  [key: string]: PathNode | string | undefined;
} & BasePathNode;

export type PathNodeMap = Record<keyof typeof pathMap, PathNode>;
export type PathMapType = typeof pathMap;

================
File: packages/shared/package.json
================
{
  "name": "@tapie-kr/dashboard-shared",
  "version": "1.0.0",
  "description": "Shared Codes for tapie.kr",
  "author": {
    "name": "Jeewon Kwon",
    "email": "jeewon.kwon.0817@gmail.com",
    "url": "https://github.com/jwkwon0817"
  },
  "contributors": [],
  "license": "MIT",
  "homepage": "https://tapie.kr/",
  "repository": {
    "type": "git",
    "url": "https://github.com/tapie-kr/dashboard.git"
  },
  "devDependencies": {
    "@types/node": "^22.10.10",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "next": "^15.1.6"
  },
  "dependencies": {
    "@cottons-kr/react-foundation": "^0.3.9",
    "@tapie-kr/inspire-react": "^0.1.46",
    "@vanilla-extract/css": "^1.17.0",
    "@vanilla-extract/next-plugin": "^2.4.8",
    "classnames": "^2.5.1",
    "framer-motion": "^11.18.2",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  }
}

================
File: packages/shared/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "~/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: .gitignore
================
node_modules/
.git
dist/
.pnpm-store
.cache
.env
.DS_Store
.next/

================
File: eslint.config.mjs
================
import config from '@tapie-kr/code-guideline-react';

export default config;

================
File: package.json
================
{
  "name": "@tapie-kr/dashboard",
  "workspaces": [
    "packages/*"
  ],
  "version": "1.0.0",
  "description": "TAPIE Dashboard",
  "scripts": {
    "format": "pnpm run lint && pnpm run prettier",
    "prettier": "prettier --write . --log-level warn",
    "lint": "eslint . --fix",
    "admin": "pnpm --filter @tapie-kr/admin-dashboard",
    "shared": "pnpm --filter @tapie-kr/dashboard-shared"
  },
  "devDependencies": {
    "@tapie-kr/code-guideline-base": "^0.1.20",
    "@tapie-kr/code-guideline-react": "^0.0.7",
    "eslint": "^9.19.0",
    "prettier": "^3.4.2"
  },
  "author": {
    "name": "Jeewon Kwon",
    "email": "jeewon.kwon.0817@gmail.com",
    "url": "https://github.com/jwkwon0817"
  },
  "contributors": [],
  "license": "MIT",
  "homepage": "https://tapie.kr/",
  "repository": {
    "type": "git",
    "url": "https://github.com/tapie-kr/dashboard.git"
  },
  "packageManager": "pnpm@9.15.1+sha512.1acb565e6193efbebda772702950469150cf12bcc764262e7587e71d19dc98a423dff9536e57ea44c49bdf790ff694e83c27be5faa23d67e0c033b583be4bfcf"
}

================
File: pnpm-workspace.yaml
================
packages:
  - 'packages/*'

================
File: README.md
================
![Cover Image](https://minio-mgowcsocwso4g0wo0o0wg0sk.apne2a.algorix.cloud/inspire-asset/management-system-cover.png)



================================================================
End of Codebase
================================================================
